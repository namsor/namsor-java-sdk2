/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.APIClassifierTaxonomyOut;
import com.namsor.sdk2.model.APIClassifiersStatusOut;
import com.namsor.sdk2.model.APIKeyOut;
import com.namsor.sdk2.model.APIPeriodUsageOut;
import com.namsor.sdk2.model.APIServicesOut;
import com.namsor.sdk2.model.APIUsageAggregatedOut;
import com.namsor.sdk2.model.APIUsageHistoryOut;
import com.namsor.sdk2.model.RegionOut;
import com.namsor.sdk2.model.SoftwareVersionOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for anonymize
     * @param source  (required)
     * @param anonymized  (required)
     * @param token  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizeCall(String source, Boolean anonymized, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/anonymize/{source}/{anonymized}/{token}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "anonymized" + "}", localVarApiClient.escapeString(anonymized.toString()))
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizeValidateBeforeCall(String source, Boolean anonymized, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling anonymize(Async)");
        }

        // verify the required parameter 'anonymized' is set
        if (anonymized == null) {
            throw new ApiException("Missing the required parameter 'anonymized' when calling anonymize(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling anonymize(Async)");
        }

        return anonymizeCall(source, anonymized, token, _callback);

    }

    /**
     * Activate/deactivate anonymization for a source.
     * 
     * @param source  (required)
     * @param anonymized  (required)
     * @param token  (required)
     * @return APIKeyOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public APIKeyOut anonymize(String source, Boolean anonymized, String token) throws ApiException {
        ApiResponse<APIKeyOut> localVarResp = anonymizeWithHttpInfo(source, anonymized, token);
        return localVarResp.getData();
    }

    /**
     * Activate/deactivate anonymization for a source.
     * 
     * @param source  (required)
     * @param anonymized  (required)
     * @param token  (required)
     * @return ApiResponse&lt;APIKeyOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIKeyOut> anonymizeWithHttpInfo(String source, Boolean anonymized, String token) throws ApiException {
        okhttp3.Call localVarCall = anonymizeValidateBeforeCall(source, anonymized, token, null);
        Type localVarReturnType = new TypeToken<APIKeyOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate/deactivate anonymization for a source. (asynchronously)
     * 
     * @param source  (required)
     * @param anonymized  (required)
     * @param token  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizeAsync(String source, Boolean anonymized, String token, final ApiCallback<APIKeyOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizeValidateBeforeCall(source, anonymized, token, _callback);
        Type localVarReturnType = new TypeToken<APIKeyOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymize1
     * @param source  (required)
     * @param anonymized  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymize1Call(String source, Boolean anonymized, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/anonymize/{source}/{anonymized}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "anonymized" + "}", localVarApiClient.escapeString(anonymized.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymize1ValidateBeforeCall(String source, Boolean anonymized, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling anonymize1(Async)");
        }

        // verify the required parameter 'anonymized' is set
        if (anonymized == null) {
            throw new ApiException("Missing the required parameter 'anonymized' when calling anonymize1(Async)");
        }

        return anonymize1Call(source, anonymized, _callback);

    }

    /**
     * Activate/deactivate anonymization for a source.
     * 
     * @param source  (required)
     * @param anonymized  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public void anonymize1(String source, Boolean anonymized) throws ApiException {
        anonymize1WithHttpInfo(source, anonymized);
    }

    /**
     * Activate/deactivate anonymization for a source.
     * 
     * @param source  (required)
     * @param anonymized  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> anonymize1WithHttpInfo(String source, Boolean anonymized) throws ApiException {
        okhttp3.Call localVarCall = anonymize1ValidateBeforeCall(source, anonymized, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate/deactivate anonymization for a source. (asynchronously)
     * 
     * @param source  (required)
     * @param anonymized  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Anonymization of a source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymize1Async(String source, Boolean anonymized, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymize1ValidateBeforeCall(source, anonymized, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiKeyInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read API Key (uncached, i.e. DB read) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/apiKeyInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiKeyInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiKeyInfoCall(_callback);

    }

    /**
     * Read API Key info.
     * 
     * @return APIKeyOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read API Key (uncached, i.e. DB read) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public APIKeyOut apiKeyInfo() throws ApiException {
        ApiResponse<APIKeyOut> localVarResp = apiKeyInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Read API Key info.
     * 
     * @return ApiResponse&lt;APIKeyOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read API Key (uncached, i.e. DB read) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIKeyOut> apiKeyInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiKeyInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<APIKeyOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read API Key info. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read API Key (uncached, i.e. DB read) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiKeyInfoAsync(final ApiCallback<APIKeyOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiKeyInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<APIKeyOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available classifiers and status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/apiStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiStatusCall(_callback);

    }

    /**
     * Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.
     * 
     * @return APIClassifiersStatusOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available classifiers and status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public APIClassifiersStatusOut apiStatus() throws ApiException {
        ApiResponse<APIClassifiersStatusOut> localVarResp = apiStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.
     * 
     * @return ApiResponse&lt;APIClassifiersStatusOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available classifiers and status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIClassifiersStatusOut> apiStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<APIClassifiersStatusOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available classifiers and status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiStatusAsync(final ApiCallback<APIClassifiersStatusOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<APIClassifiersStatusOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsage
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print current API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/apiUsage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsageValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiUsageCall(_callback);

    }

    /**
     * Print current API usage.
     * 
     * @return APIPeriodUsageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print current API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public APIPeriodUsageOut apiUsage() throws ApiException {
        ApiResponse<APIPeriodUsageOut> localVarResp = apiUsageWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Print current API usage.
     * 
     * @return ApiResponse&lt;APIPeriodUsageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print current API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPeriodUsageOut> apiUsageWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiUsageValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<APIPeriodUsageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Print current API usage. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print current API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageAsync(final ApiCallback<APIPeriodUsageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsageValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<APIPeriodUsageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsageHistory
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage (NB. new output format form v2.0.15) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageHistoryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/apiUsageHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsageHistoryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiUsageHistoryCall(_callback);

    }

    /**
     * Print historical API usage.
     * 
     * @return APIUsageHistoryOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage (NB. new output format form v2.0.15) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public APIUsageHistoryOut apiUsageHistory() throws ApiException {
        ApiResponse<APIUsageHistoryOut> localVarResp = apiUsageHistoryWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Print historical API usage.
     * 
     * @return ApiResponse&lt;APIUsageHistoryOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage (NB. new output format form v2.0.15) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIUsageHistoryOut> apiUsageHistoryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiUsageHistoryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<APIUsageHistoryOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Print historical API usage. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage (NB. new output format form v2.0.15) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageHistoryAsync(final ApiCallback<APIUsageHistoryOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsageHistoryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<APIUsageHistoryOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsageHistoryAggregate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageHistoryAggregateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/apiUsageHistoryAggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsageHistoryAggregateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiUsageHistoryAggregateCall(_callback);

    }

    /**
     * Print historical API usage (in an aggregated view, by service, by day/hour/min).
     * 
     * @return APIUsageAggregatedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public APIUsageAggregatedOut apiUsageHistoryAggregate() throws ApiException {
        ApiResponse<APIUsageAggregatedOut> localVarResp = apiUsageHistoryAggregateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Print historical API usage (in an aggregated view, by service, by day/hour/min).
     * 
     * @return ApiResponse&lt;APIUsageAggregatedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIUsageAggregatedOut> apiUsageHistoryAggregateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiUsageHistoryAggregateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<APIUsageAggregatedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Print historical API usage (in an aggregated view, by service, by day/hour/min). (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Print historical API usage. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsageHistoryAggregateAsync(final ApiCallback<APIUsageAggregatedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsageHistoryAggregateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<APIUsageAggregatedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for availableServices
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availableServicesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/apiServices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call availableServicesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return availableServicesCall(_callback);

    }

    /**
     * List of classification services and usage cost in Units per classification (default is 1&#x3D;ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.
     * 
     * @return APIServicesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public APIServicesOut availableServices() throws ApiException {
        ApiResponse<APIServicesOut> localVarResp = availableServicesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List of classification services and usage cost in Units per classification (default is 1&#x3D;ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.
     * 
     * @return ApiResponse&lt;APIServicesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIServicesOut> availableServicesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = availableServicesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<APIServicesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of classification services and usage cost in Units per classification (default is 1&#x3D;ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availableServicesAsync(final ApiCallback<APIServicesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = availableServicesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<APIServicesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disable
     * @param source The API Key to set as enabled/disabled. (required)
     * @param disabled  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disabled the API Key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableCall(String source, Boolean disabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/disable/{source}/{disabled}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "disabled" + "}", localVarApiClient.escapeString(disabled.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableValidateBeforeCall(String source, Boolean disabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling disable(Async)");
        }

        // verify the required parameter 'disabled' is set
        if (disabled == null) {
            throw new ApiException("Missing the required parameter 'disabled' when calling disable(Async)");
        }

        return disableCall(source, disabled, _callback);

    }

    /**
     * Activate/deactivate an API Key.
     * 
     * @param source The API Key to set as enabled/disabled. (required)
     * @param disabled  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disabled the API Key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public void disable(String source, Boolean disabled) throws ApiException {
        disableWithHttpInfo(source, disabled);
    }

    /**
     * Activate/deactivate an API Key.
     * 
     * @param source The API Key to set as enabled/disabled. (required)
     * @param disabled  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disabled the API Key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disableWithHttpInfo(String source, Boolean disabled) throws ApiException {
        okhttp3.Call localVarCall = disableValidateBeforeCall(source, disabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate/deactivate an API Key. (asynchronously)
     * 
     * @param source The API Key to set as enabled/disabled. (required)
     * @param disabled  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disabled the API Key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableAsync(String source, Boolean disabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableValidateBeforeCall(source, disabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for learnable
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @param token  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call learnableCall(String source, Boolean learnable, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/learnable/{source}/{learnable}/{token}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "learnable" + "}", localVarApiClient.escapeString(learnable.toString()))
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call learnableValidateBeforeCall(String source, Boolean learnable, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling learnable(Async)");
        }

        // verify the required parameter 'learnable' is set
        if (learnable == null) {
            throw new ApiException("Missing the required parameter 'learnable' when calling learnable(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling learnable(Async)");
        }

        return learnableCall(source, learnable, token, _callback);

    }

    /**
     * Activate/deactivate learning from a source.
     * 
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @param token  (required)
     * @return APIKeyOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public APIKeyOut learnable(String source, Boolean learnable, String token) throws ApiException {
        ApiResponse<APIKeyOut> localVarResp = learnableWithHttpInfo(source, learnable, token);
        return localVarResp.getData();
    }

    /**
     * Activate/deactivate learning from a source.
     * 
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @param token  (required)
     * @return ApiResponse&lt;APIKeyOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIKeyOut> learnableWithHttpInfo(String source, Boolean learnable, String token) throws ApiException {
        okhttp3.Call localVarCall = learnableValidateBeforeCall(source, learnable, token, null);
        Type localVarReturnType = new TypeToken<APIKeyOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate/deactivate learning from a source. (asynchronously)
     * 
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @param token  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call learnableAsync(String source, Boolean learnable, String token, final ApiCallback<APIKeyOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = learnableValidateBeforeCall(source, learnable, token, _callback);
        Type localVarReturnType = new TypeToken<APIKeyOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for learnable1
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call learnable1Call(String source, Boolean learnable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/learnable/{source}/{learnable}"
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()))
            .replace("{" + "learnable" + "}", localVarApiClient.escapeString(learnable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call learnable1ValidateBeforeCall(String source, Boolean learnable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling learnable1(Async)");
        }

        // verify the required parameter 'learnable' is set
        if (learnable == null) {
            throw new ApiException("Missing the required parameter 'learnable' when calling learnable1(Async)");
        }

        return learnable1Call(source, learnable, _callback);

    }

    /**
     * Activate/deactivate learning from a source.
     * 
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public void learnable1(String source, Boolean learnable) throws ApiException {
        learnable1WithHttpInfo(source, learnable);
    }

    /**
     * Activate/deactivate learning from a source.
     * 
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> learnable1WithHttpInfo(String source, Boolean learnable) throws ApiException {
        okhttp3.Call localVarCall = learnable1ValidateBeforeCall(source, learnable, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate/deactivate learning from a source. (asynchronously)
     * 
     * @param source The API Key to set as learnable/non learnable. (required)
     * @param learnable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set learning from source. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call learnable1Async(String source, Boolean learnable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = learnable1ValidateBeforeCall(source, learnable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for regions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries and regions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/regions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return regionsCall(_callback);

    }

    /**
     * Print basic source statistics.
     * 
     * @return RegionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries and regions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public RegionOut regions() throws ApiException {
        ApiResponse<RegionOut> localVarResp = regionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Print basic source statistics.
     * 
     * @return ApiResponse&lt;RegionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries and regions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegionOut> regionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = regionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RegionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Print basic source statistics. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries and regions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regionsAsync(final ApiCallback<RegionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = regionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RegionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for softwareVersion
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current software version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call softwareVersionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/softwareVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call softwareVersionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return softwareVersionCall(_callback);

    }

    /**
     * Get the current software version
     * 
     * @return SoftwareVersionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current software version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public SoftwareVersionOut softwareVersion() throws ApiException {
        ApiResponse<SoftwareVersionOut> localVarResp = softwareVersionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the current software version
     * 
     * @return ApiResponse&lt;SoftwareVersionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current software version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoftwareVersionOut> softwareVersionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = softwareVersionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SoftwareVersionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the current software version (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current software version </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call softwareVersionAsync(final ApiCallback<SoftwareVersionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = softwareVersionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SoftwareVersionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxonomyClasses
     * @param classifierName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available plans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxonomyClassesCall(String classifierName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/taxonomyClasses/{classifierName}"
            .replace("{" + "classifierName" + "}", localVarApiClient.escapeString(classifierName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxonomyClassesValidateBeforeCall(String classifierName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'classifierName' is set
        if (classifierName == null) {
            throw new ApiException("Missing the required parameter 'classifierName' when calling taxonomyClasses(Async)");
        }

        return taxonomyClassesCall(classifierName, _callback);

    }

    /**
     * Print the taxonomy classes valid for the given classifier.
     * 
     * @param classifierName  (required)
     * @return APIClassifierTaxonomyOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available plans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public APIClassifierTaxonomyOut taxonomyClasses(String classifierName) throws ApiException {
        ApiResponse<APIClassifierTaxonomyOut> localVarResp = taxonomyClassesWithHttpInfo(classifierName);
        return localVarResp.getData();
    }

    /**
     * Print the taxonomy classes valid for the given classifier.
     * 
     * @param classifierName  (required)
     * @return ApiResponse&lt;APIClassifierTaxonomyOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available plans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIClassifierTaxonomyOut> taxonomyClassesWithHttpInfo(String classifierName) throws ApiException {
        okhttp3.Call localVarCall = taxonomyClassesValidateBeforeCall(classifierName, null);
        Type localVarReturnType = new TypeToken<APIClassifierTaxonomyOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Print the taxonomy classes valid for the given classifier. (asynchronously)
     * 
     * @param classifierName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Available plans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxonomyClassesAsync(String classifierName, final ApiCallback<APIClassifierTaxonomyOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxonomyClassesValidateBeforeCall(classifierName, _callback);
        Type localVarReturnType = new TypeToken<APIClassifierTaxonomyOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
