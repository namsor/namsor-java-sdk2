/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNameGenderIn;
import com.namsor.sdk2.model.BatchFirstLastNameGenderedOut;
import com.namsor.sdk2.model.BatchFirstLastNameIn;
import com.namsor.sdk2.model.BatchMatchPersonalFirstLastNameIn;
import com.namsor.sdk2.model.BatchNameMatchCandidatesOut;
import com.namsor.sdk2.model.BatchNameMatchedOut;
import com.namsor.sdk2.model.BatchPersonalNameGenderedOut;
import com.namsor.sdk2.model.BatchPersonalNameIn;
import com.namsor.sdk2.model.BatchPersonalNameParsedOut;
import com.namsor.sdk2.model.FirstLastNameGenderedOut;
import com.namsor.sdk2.model.NameMatchCandidatesOut;
import com.namsor.sdk2.model.NameMatchedOut;
import com.namsor.sdk2.model.PersonalNameGenderedOut;
import com.namsor.sdk2.model.PersonalNameParsedOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChineseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChineseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChineseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for chineseNameCandidates
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameCandidatesCall(String chineseSurnameLatin, String chineseGivenNameLatin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}"
            .replace("{" + "chineseSurnameLatin" + "}", localVarApiClient.escapeString(chineseSurnameLatin.toString()))
            .replace("{" + "chineseGivenNameLatin" + "}", localVarApiClient.escapeString(chineseGivenNameLatin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chineseNameCandidatesValidateBeforeCall(String chineseSurnameLatin, String chineseGivenNameLatin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chineseSurnameLatin' is set
        if (chineseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseSurnameLatin' when calling chineseNameCandidates(Async)");
        }

        // verify the required parameter 'chineseGivenNameLatin' is set
        if (chineseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseGivenNameLatin' when calling chineseNameCandidates(Async)");
        }

        return chineseNameCandidatesCall(chineseSurnameLatin, chineseGivenNameLatin, _callback);

    }

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @return NameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public NameMatchCandidatesOut chineseNameCandidates(String chineseSurnameLatin, String chineseGivenNameLatin) throws ApiException {
        ApiResponse<NameMatchCandidatesOut> localVarResp = chineseNameCandidatesWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
        return localVarResp.getData();
    }

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @return ApiResponse&lt;NameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameMatchCandidatesOut> chineseNameCandidatesWithHttpInfo(String chineseSurnameLatin, String chineseGivenNameLatin) throws ApiException {
        okhttp3.Call localVarCall = chineseNameCandidatesValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, null);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming (asynchronously)
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameCandidatesAsync(String chineseSurnameLatin, String chineseGivenNameLatin, final ApiCallback<NameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = chineseNameCandidatesValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, _callback);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chineseNameCandidatesBatch
     * @param batchFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameCandidatesBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/chineseNameCandidatesBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chineseNameCandidatesBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        return chineseNameCandidatesBatchCall(batchFirstLastNameIn, _callback);

    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
     * 
     * @param batchFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchNameMatchCandidatesOut chineseNameCandidatesBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> localVarResp = chineseNameCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
        return localVarResp.getData();
    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
     * 
     * @param batchFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchNameMatchCandidatesOut> chineseNameCandidatesBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        okhttp3.Call localVarCall = chineseNameCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameCandidatesBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchNameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = chineseNameCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chineseNameCandidatesGenderBatch
     * @param batchFirstLastNameGenderIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameCandidatesGenderBatchCall(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameGenderIn;

        // create path and map variables
        String localVarPath = "/api2/json/chineseNameCandidatesGenderBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chineseNameCandidatesGenderBatchValidateBeforeCall(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn, final ApiCallback _callback) throws ApiException {
        return chineseNameCandidatesGenderBatchCall(batchFirstLastNameGenderIn, _callback);

    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
     * 
     * @param batchFirstLastNameGenderIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchNameMatchCandidatesOut chineseNameCandidatesGenderBatch(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> localVarResp = chineseNameCandidatesGenderBatchWithHttpInfo(batchFirstLastNameGenderIn);
        return localVarResp.getData();
    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
     * 
     * @param batchFirstLastNameGenderIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchNameMatchCandidatesOut> chineseNameCandidatesGenderBatchWithHttpInfo(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn) throws ApiException {
        okhttp3.Call localVarCall = chineseNameCandidatesGenderBatchValidateBeforeCall(batchFirstLastNameGenderIn, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. (asynchronously)
     * 
     * @param batchFirstLastNameGenderIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameCandidatesGenderBatchAsync(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn, final ApiCallback<BatchNameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = chineseNameCandidatesGenderBatchValidateBeforeCall(batchFirstLastNameGenderIn, _callback);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chineseNameGenderCandidates
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameGenderCandidatesCall(String chineseSurnameLatin, String chineseGivenNameLatin, String knownGender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}"
            .replace("{" + "chineseSurnameLatin" + "}", localVarApiClient.escapeString(chineseSurnameLatin.toString()))
            .replace("{" + "chineseGivenNameLatin" + "}", localVarApiClient.escapeString(chineseGivenNameLatin.toString()))
            .replace("{" + "knownGender" + "}", localVarApiClient.escapeString(knownGender.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chineseNameGenderCandidatesValidateBeforeCall(String chineseSurnameLatin, String chineseGivenNameLatin, String knownGender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chineseSurnameLatin' is set
        if (chineseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseSurnameLatin' when calling chineseNameGenderCandidates(Async)");
        }

        // verify the required parameter 'chineseGivenNameLatin' is set
        if (chineseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseGivenNameLatin' when calling chineseNameGenderCandidates(Async)");
        }

        // verify the required parameter 'knownGender' is set
        if (knownGender == null) {
            throw new ApiException("Missing the required parameter 'knownGender' when calling chineseNameGenderCandidates(Async)");
        }

        return chineseNameGenderCandidatesCall(chineseSurnameLatin, chineseGivenNameLatin, knownGender, _callback);

    }

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @return NameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public NameMatchCandidatesOut chineseNameGenderCandidates(String chineseSurnameLatin, String chineseGivenNameLatin, String knownGender) throws ApiException {
        ApiResponse<NameMatchCandidatesOut> localVarResp = chineseNameGenderCandidatesWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, knownGender);
        return localVarResp.getData();
    }

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @return ApiResponse&lt;NameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameMatchCandidatesOut> chineseNameGenderCandidatesWithHttpInfo(String chineseSurnameLatin, String chineseGivenNameLatin, String knownGender) throws ApiException {
        okhttp3.Call localVarCall = chineseNameGenderCandidatesValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, knownGender, null);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) (asynchronously)
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameGenderCandidatesAsync(String chineseSurnameLatin, String chineseGivenNameLatin, String knownGender, final ApiCallback<NameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = chineseNameGenderCandidatesValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, knownGender, _callback);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chineseNameMatch
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param chineseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameMatchCall(String chineseSurnameLatin, String chineseGivenNameLatin, String chineseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}"
            .replace("{" + "chineseSurnameLatin" + "}", localVarApiClient.escapeString(chineseSurnameLatin.toString()))
            .replace("{" + "chineseGivenNameLatin" + "}", localVarApiClient.escapeString(chineseGivenNameLatin.toString()))
            .replace("{" + "chineseName" + "}", localVarApiClient.escapeString(chineseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chineseNameMatchValidateBeforeCall(String chineseSurnameLatin, String chineseGivenNameLatin, String chineseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chineseSurnameLatin' is set
        if (chineseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseSurnameLatin' when calling chineseNameMatch(Async)");
        }

        // verify the required parameter 'chineseGivenNameLatin' is set
        if (chineseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseGivenNameLatin' when calling chineseNameMatch(Async)");
        }

        // verify the required parameter 'chineseName' is set
        if (chineseName == null) {
            throw new ApiException("Missing the required parameter 'chineseName' when calling chineseNameMatch(Async)");
        }

        return chineseNameMatchCall(chineseSurnameLatin, chineseGivenNameLatin, chineseName, _callback);

    }

    /**
     * Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param chineseName  (required)
     * @return NameMatchedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public NameMatchedOut chineseNameMatch(String chineseSurnameLatin, String chineseGivenNameLatin, String chineseName) throws ApiException {
        ApiResponse<NameMatchedOut> localVarResp = chineseNameMatchWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, chineseName);
        return localVarResp.getData();
    }

    /**
     * Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param chineseName  (required)
     * @return ApiResponse&lt;NameMatchedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameMatchedOut> chineseNameMatchWithHttpInfo(String chineseSurnameLatin, String chineseGivenNameLatin, String chineseName) throws ApiException {
        okhttp3.Call localVarCall = chineseNameMatchValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, chineseName, null);
        Type localVarReturnType = new TypeToken<NameMatchedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming (asynchronously)
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param chineseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameMatchAsync(String chineseSurnameLatin, String chineseGivenNameLatin, String chineseName, final ApiCallback<NameMatchedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = chineseNameMatchValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, chineseName, _callback);
        Type localVarReturnType = new TypeToken<NameMatchedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chineseNameMatchBatch
     * @param batchMatchPersonalFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameMatchBatchCall(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchMatchPersonalFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/chineseNameMatchBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chineseNameMatchBatchValidateBeforeCall(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        return chineseNameMatchBatchCall(batchMatchPersonalFirstLastNameIn, _callback);

    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
     * 
     * @param batchMatchPersonalFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @return BatchNameMatchedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchNameMatchedOut chineseNameMatchBatch(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchedOut> localVarResp = chineseNameMatchBatchWithHttpInfo(batchMatchPersonalFirstLastNameIn);
        return localVarResp.getData();
    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
     * 
     * @param batchMatchPersonalFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchNameMatchedOut> chineseNameMatchBatchWithHttpInfo(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn) throws ApiException {
        okhttp3.Call localVarCall = chineseNameMatchBatchValidateBeforeCall(batchMatchPersonalFirstLastNameIn, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming (asynchronously)
     * 
     * @param batchMatchPersonalFirstLastNameIn A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chineseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn, final ApiCallback<BatchNameMatchedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = chineseNameMatchBatchValidateBeforeCall(batchMatchPersonalFirstLastNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchNameMatchedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genderChineseName
     * @param chineseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNameCall(String chineseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/genderChineseName/{chineseName}"
            .replace("{" + "chineseName" + "}", localVarApiClient.escapeString(chineseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderChineseNameValidateBeforeCall(String chineseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chineseName' is set
        if (chineseName == null) {
            throw new ApiException("Missing the required parameter 'chineseName' when calling genderChineseName(Async)");
        }

        return genderChineseNameCall(chineseName, _callback);

    }

    /**
     * Infer the likely gender of a Chinese full name ex. 王晓明
     * 
     * @param chineseName  (required)
     * @return PersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameGenderedOut genderChineseName(String chineseName) throws ApiException {
        ApiResponse<PersonalNameGenderedOut> localVarResp = genderChineseNameWithHttpInfo(chineseName);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of a Chinese full name ex. 王晓明
     * 
     * @param chineseName  (required)
     * @return ApiResponse&lt;PersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameGenderedOut> genderChineseNameWithHttpInfo(String chineseName) throws ApiException {
        okhttp3.Call localVarCall = genderChineseNameValidateBeforeCall(chineseName, null);
        Type localVarReturnType = new TypeToken<PersonalNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of a Chinese full name ex. 王晓明 (asynchronously)
     * 
     * @param chineseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNameAsync(String chineseName, final ApiCallback<PersonalNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderChineseNameValidateBeforeCall(chineseName, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genderChineseNameBatch
     * @param batchPersonalNameIn A list of personal names, with a country ISO2 code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNameBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderChineseNameBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderChineseNameBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        return genderChineseNameBatchCall(batchPersonalNameIn, _callback);

    }

    /**
     * Infer the likely gender of up to 100 full names ex. 王晓明
     * 
     * @param batchPersonalNameIn A list of personal names, with a country ISO2 code (optional)
     * @return BatchPersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameGenderedOut genderChineseNameBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameGenderedOut> localVarResp = genderChineseNameBatchWithHttpInfo(batchPersonalNameIn);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of up to 100 full names ex. 王晓明
     * 
     * @param batchPersonalNameIn A list of personal names, with a country ISO2 code (optional)
     * @return ApiResponse&lt;BatchPersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameGenderedOut> genderChineseNameBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        okhttp3.Call localVarCall = genderChineseNameBatchValidateBeforeCall(batchPersonalNameIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 100 full names ex. 王晓明 (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names, with a country ISO2 code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNameBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderChineseNameBatchValidateBeforeCall(batchPersonalNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genderChineseNamePinyin
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNamePinyinCall(String chineseSurnameLatin, String chineseGivenNameLatin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}"
            .replace("{" + "chineseSurnameLatin" + "}", localVarApiClient.escapeString(chineseSurnameLatin.toString()))
            .replace("{" + "chineseGivenNameLatin" + "}", localVarApiClient.escapeString(chineseGivenNameLatin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderChineseNamePinyinValidateBeforeCall(String chineseSurnameLatin, String chineseGivenNameLatin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chineseSurnameLatin' is set
        if (chineseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseSurnameLatin' when calling genderChineseNamePinyin(Async)");
        }

        // verify the required parameter 'chineseGivenNameLatin' is set
        if (chineseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'chineseGivenNameLatin' when calling genderChineseNamePinyin(Async)");
        }

        return genderChineseNamePinyinCall(chineseSurnameLatin, chineseGivenNameLatin, _callback);

    }

    /**
     * Infer the likely gender of a Chinese name in LATIN (Pinyin).
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @return FirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNameGenderedOut genderChineseNamePinyin(String chineseSurnameLatin, String chineseGivenNameLatin) throws ApiException {
        ApiResponse<FirstLastNameGenderedOut> localVarResp = genderChineseNamePinyinWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of a Chinese name in LATIN (Pinyin).
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @return ApiResponse&lt;FirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNameGenderedOut> genderChineseNamePinyinWithHttpInfo(String chineseSurnameLatin, String chineseGivenNameLatin) throws ApiException {
        okhttp3.Call localVarCall = genderChineseNamePinyinValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of a Chinese name in LATIN (Pinyin). (asynchronously)
     * 
     * @param chineseSurnameLatin  (required)
     * @param chineseGivenNameLatin  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNamePinyinAsync(String chineseSurnameLatin, String chineseGivenNameLatin, final ApiCallback<FirstLastNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderChineseNamePinyinValidateBeforeCall(chineseSurnameLatin, chineseGivenNameLatin, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genderChineseNamePinyinBatch
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNamePinyinBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderChineseNamePinyinBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderChineseNamePinyinBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        return genderChineseNamePinyinBatchCall(batchFirstLastNameIn, _callback);

    }

    /**
     * Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @return BatchFirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNameGenderedOut genderChineseNamePinyinBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGenderedOut> localVarResp = genderChineseNamePinyinBatchWithHttpInfo(batchFirstLastNameIn);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNameGenderedOut> genderChineseNamePinyinBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        okhttp3.Call localVarCall = genderChineseNamePinyinBatchValidateBeforeCall(batchFirstLastNameIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderChineseNamePinyinBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchFirstLastNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderChineseNamePinyinBatchValidateBeforeCall(batchFirstLastNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseChineseName
     * @param chineseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseChineseNameCall(String chineseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/parseChineseName/{chineseName}"
            .replace("{" + "chineseName" + "}", localVarApiClient.escapeString(chineseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseChineseNameValidateBeforeCall(String chineseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chineseName' is set
        if (chineseName == null) {
            throw new ApiException("Missing the required parameter 'chineseName' when calling parseChineseName(Async)");
        }

        return parseChineseNameCall(chineseName, _callback);

    }

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
     * 
     * @param chineseName  (required)
     * @return PersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameParsedOut parseChineseName(String chineseName) throws ApiException {
        ApiResponse<PersonalNameParsedOut> localVarResp = parseChineseNameWithHttpInfo(chineseName);
        return localVarResp.getData();
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
     * 
     * @param chineseName  (required)
     * @return ApiResponse&lt;PersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameParsedOut> parseChineseNameWithHttpInfo(String chineseName) throws ApiException {
        okhttp3.Call localVarCall = parseChineseNameValidateBeforeCall(chineseName, null);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) (asynchronously)
     * 
     * @param chineseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseChineseNameAsync(String chineseName, final ApiCallback<PersonalNameParsedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseChineseNameValidateBeforeCall(chineseName, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseChineseNameBatch
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseChineseNameBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/parseChineseNameBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseChineseNameBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        return parseChineseNameBatchCall(batchPersonalNameIn, _callback);

    }

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return BatchPersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameParsedOut parseChineseNameBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameParsedOut> localVarResp = parseChineseNameBatchWithHttpInfo(batchPersonalNameIn);
        return localVarResp.getData();
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameParsedOut> parseChineseNameBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        okhttp3.Call localVarCall = parseChineseNameBatchValidateBeforeCall(batchPersonalNameIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseChineseNameBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameParsedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseChineseNameBatchValidateBeforeCall(batchPersonalNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pinyinChineseName
     * @param chineseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A pinyin name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinyinChineseNameCall(String chineseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/pinyinChineseName/{chineseName}"
            .replace("{" + "chineseName" + "}", localVarApiClient.escapeString(chineseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinyinChineseNameValidateBeforeCall(String chineseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chineseName' is set
        if (chineseName == null) {
            throw new ApiException("Missing the required parameter 'chineseName' when calling pinyinChineseName(Async)");
        }

        return pinyinChineseNameCall(chineseName, _callback);

    }

    /**
     * Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
     * 
     * @param chineseName  (required)
     * @return PersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A pinyin name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameParsedOut pinyinChineseName(String chineseName) throws ApiException {
        ApiResponse<PersonalNameParsedOut> localVarResp = pinyinChineseNameWithHttpInfo(chineseName);
        return localVarResp.getData();
    }

    /**
     * Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
     * 
     * @param chineseName  (required)
     * @return ApiResponse&lt;PersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A pinyin name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameParsedOut> pinyinChineseNameWithHttpInfo(String chineseName) throws ApiException {
        okhttp3.Call localVarCall = pinyinChineseNameValidateBeforeCall(chineseName, null);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) (asynchronously)
     * 
     * @param chineseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A pinyin name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinyinChineseNameAsync(String chineseName, final ApiCallback<PersonalNameParsedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinyinChineseNameValidateBeforeCall(chineseName, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pinyinChineseNameBatch
     * @param batchPersonalNameIn A list of Chinese names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pinyin names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinyinChineseNameBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/pinyinChineseNameBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinyinChineseNameBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        return pinyinChineseNameBatchCall(batchPersonalNameIn, _callback);

    }

    /**
     * Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
     * 
     * @param batchPersonalNameIn A list of Chinese names (optional)
     * @return BatchPersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pinyin names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameParsedOut pinyinChineseNameBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameParsedOut> localVarResp = pinyinChineseNameBatchWithHttpInfo(batchPersonalNameIn);
        return localVarResp.getData();
    }

    /**
     * Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
     * 
     * @param batchPersonalNameIn A list of Chinese names (optional)
     * @return ApiResponse&lt;BatchPersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pinyin names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameParsedOut> pinyinChineseNameBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        okhttp3.Call localVarCall = pinyinChineseNameBatchValidateBeforeCall(batchPersonalNameIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). (asynchronously)
     * 
     * @param batchPersonalNameIn A list of Chinese names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pinyin names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinyinChineseNameBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameParsedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinyinChineseNameBatchValidateBeforeCall(batchPersonalNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
