/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.9
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNamePhoneCodedOut;
import com.namsor.sdk2.model.BatchFirstLastNamePhoneNumberGeoIn;
import com.namsor.sdk2.model.BatchFirstLastNamePhoneNumberIn;
import com.namsor.sdk2.model.FirstLastNamePhoneCodedOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SocialApi {
    private ApiClient apiClient;

    public SocialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SocialApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for phoneCode
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phoneCodeCall(String firstName, String lastName, String phoneNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()))
            .replaceAll("\\{" + "phoneNumber" + "\\}", apiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phoneCodeValidateBeforeCall(String firstName, String lastName, String phoneNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling phoneCode(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling phoneCode(Async)");
        }
        
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling phoneCode(Async)");
        }
        

        com.squareup.okhttp.Call call = phoneCodeCall(firstName, lastName, phoneNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @return FirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNamePhoneCodedOut phoneCode(String firstName, String lastName, String phoneNumber) throws ApiException {
        ApiResponse<FirstLastNamePhoneCodedOut> resp = phoneCodeWithHttpInfo(firstName, lastName, phoneNumber);
        return resp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @return ApiResponse&lt;FirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNamePhoneCodedOut> phoneCodeWithHttpInfo(String firstName, String lastName, String phoneNumber) throws ApiException {
        com.squareup.okhttp.Call call = phoneCodeValidateBeforeCall(firstName, lastName, phoneNumber, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phoneCodeAsync(String firstName, String lastName, String phoneNumber, final ApiCallback<FirstLastNamePhoneCodedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phoneCodeValidateBeforeCall(firstName, lastName, phoneNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for phoneCodeBatch
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phoneCodeBatchCall(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNamePhoneNumberIn;

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phoneCodeBatchValidateBeforeCall(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = phoneCodeBatchCall(batchFirstLastNamePhoneNumberIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @return BatchFirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNamePhoneCodedOut phoneCodeBatch(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn) throws ApiException {
        ApiResponse<BatchFirstLastNamePhoneCodedOut> resp = phoneCodeBatchWithHttpInfo(batchFirstLastNamePhoneNumberIn);
        return resp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNamePhoneCodedOut> phoneCodeBatchWithHttpInfo(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn) throws ApiException {
        com.squareup.okhttp.Call call = phoneCodeBatchValidateBeforeCall(batchFirstLastNamePhoneNumberIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. (asynchronously)
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phoneCodeBatchAsync(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn, final ApiCallback<BatchFirstLastNamePhoneCodedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phoneCodeBatchValidateBeforeCall(batchFirstLastNamePhoneNumberIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for phoneCodeGeo
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phoneCodeGeoCall(String firstName, String lastName, String phoneNumber, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()))
            .replaceAll("\\{" + "phoneNumber" + "\\}", apiClient.escapeString(phoneNumber.toString()))
            .replaceAll("\\{" + "countryIso2" + "\\}", apiClient.escapeString(countryIso2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phoneCodeGeoValidateBeforeCall(String firstName, String lastName, String phoneNumber, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling phoneCodeGeo(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling phoneCodeGeo(Async)");
        }
        
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling phoneCodeGeo(Async)");
        }
        
        // verify the required parameter 'countryIso2' is set
        if (countryIso2 == null) {
            throw new ApiException("Missing the required parameter 'countryIso2' when calling phoneCodeGeo(Async)");
        }
        

        com.squareup.okhttp.Call call = phoneCodeGeoCall(firstName, lastName, phoneNumber, countryIso2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @return FirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNamePhoneCodedOut phoneCodeGeo(String firstName, String lastName, String phoneNumber, String countryIso2) throws ApiException {
        ApiResponse<FirstLastNamePhoneCodedOut> resp = phoneCodeGeoWithHttpInfo(firstName, lastName, phoneNumber, countryIso2);
        return resp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @return ApiResponse&lt;FirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNamePhoneCodedOut> phoneCodeGeoWithHttpInfo(String firstName, String lastName, String phoneNumber, String countryIso2) throws ApiException {
        com.squareup.okhttp.Call call = phoneCodeGeoValidateBeforeCall(firstName, lastName, phoneNumber, countryIso2, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phoneCodeGeoAsync(String firstName, String lastName, String phoneNumber, String countryIso2, final ApiCallback<FirstLastNamePhoneCodedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phoneCodeGeoValidateBeforeCall(firstName, lastName, phoneNumber, countryIso2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for phoneCodeGeoBatch
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phoneCodeGeoBatchCall(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNamePhoneNumberGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeGeoBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phoneCodeGeoBatchValidateBeforeCall(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = phoneCodeGeoBatchCall(batchFirstLastNamePhoneNumberGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @return BatchFirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNamePhoneCodedOut phoneCodeGeoBatch(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNamePhoneCodedOut> resp = phoneCodeGeoBatchWithHttpInfo(batchFirstLastNamePhoneNumberGeoIn);
        return resp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNamePhoneCodedOut> phoneCodeGeoBatchWithHttpInfo(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = phoneCodeGeoBatchValidateBeforeCall(batchFirstLastNamePhoneNumberGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). (asynchronously)
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phoneCodeGeoBatchAsync(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn, final ApiCallback<BatchFirstLastNamePhoneCodedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phoneCodeGeoBatchValidateBeforeCall(batchFirstLastNamePhoneNumberGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for phoneCodeGeoFeedbackLoop
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phoneCodeGeoFeedbackLoopCall(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()))
            .replaceAll("\\{" + "phoneNumber" + "\\}", apiClient.escapeString(phoneNumber.toString()))
            .replaceAll("\\{" + "phoneNumberE164" + "\\}", apiClient.escapeString(phoneNumberE164.toString()))
            .replaceAll("\\{" + "countryIso2" + "\\}", apiClient.escapeString(countryIso2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phoneCodeGeoFeedbackLoopValidateBeforeCall(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling phoneCodeGeoFeedbackLoop(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling phoneCodeGeoFeedbackLoop(Async)");
        }
        
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling phoneCodeGeoFeedbackLoop(Async)");
        }
        
        // verify the required parameter 'phoneNumberE164' is set
        if (phoneNumberE164 == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberE164' when calling phoneCodeGeoFeedbackLoop(Async)");
        }
        
        // verify the required parameter 'countryIso2' is set
        if (countryIso2 == null) {
            throw new ApiException("Missing the required parameter 'countryIso2' when calling phoneCodeGeoFeedbackLoop(Async)");
        }
        

        com.squareup.okhttp.Call call = phoneCodeGeoFeedbackLoopCall(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @return FirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNamePhoneCodedOut phoneCodeGeoFeedbackLoop(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2) throws ApiException {
        ApiResponse<FirstLastNamePhoneCodedOut> resp = phoneCodeGeoFeedbackLoopWithHttpInfo(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2);
        return resp.getData();
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @return ApiResponse&lt;FirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNamePhoneCodedOut> phoneCodeGeoFeedbackLoopWithHttpInfo(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2) throws ApiException {
        com.squareup.okhttp.Call call = phoneCodeGeoFeedbackLoopValidateBeforeCall(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phoneCodeGeoFeedbackLoopAsync(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2, final ApiCallback<FirstLastNamePhoneCodedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phoneCodeGeoFeedbackLoopValidateBeforeCall(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
