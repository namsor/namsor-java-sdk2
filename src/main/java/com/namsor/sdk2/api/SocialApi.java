/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNamePhoneCodedOut;
import com.namsor.sdk2.model.BatchFirstLastNamePhoneNumberGeoIn;
import com.namsor.sdk2.model.BatchFirstLastNamePhoneNumberIn;
import com.namsor.sdk2.model.FirstLastNamePhoneCodedOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SocialApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SocialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SocialApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for phoneCode
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeCall(String firstName, String lastName, String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}"
            .replace("{" + "firstName" + "}", localVarApiClient.escapeString(firstName.toString()))
            .replace("{" + "lastName" + "}", localVarApiClient.escapeString(lastName.toString()))
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phoneCodeValidateBeforeCall(String firstName, String lastName, String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling phoneCode(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling phoneCode(Async)");
        }

        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling phoneCode(Async)");
        }

        return phoneCodeCall(firstName, lastName, phoneNumber, _callback);

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @return FirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNamePhoneCodedOut phoneCode(String firstName, String lastName, String phoneNumber) throws ApiException {
        ApiResponse<FirstLastNamePhoneCodedOut> localVarResp = phoneCodeWithHttpInfo(firstName, lastName, phoneNumber);
        return localVarResp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @return ApiResponse&lt;FirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNamePhoneCodedOut> phoneCodeWithHttpInfo(String firstName, String lastName, String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = phoneCodeValidateBeforeCall(firstName, lastName, phoneNumber, null);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeAsync(String firstName, String lastName, String phoneNumber, final ApiCallback<FirstLastNamePhoneCodedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = phoneCodeValidateBeforeCall(firstName, lastName, phoneNumber, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phoneCodeBatch
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeBatchCall(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNamePhoneNumberIn;

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phoneCodeBatchValidateBeforeCall(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn, final ApiCallback _callback) throws ApiException {
        return phoneCodeBatchCall(batchFirstLastNamePhoneNumberIn, _callback);

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @return BatchFirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNamePhoneCodedOut phoneCodeBatch(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn) throws ApiException {
        ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResp = phoneCodeBatchWithHttpInfo(batchFirstLastNamePhoneNumberIn);
        return localVarResp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNamePhoneCodedOut> phoneCodeBatchWithHttpInfo(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn) throws ApiException {
        okhttp3.Call localVarCall = phoneCodeBatchValidateBeforeCall(batchFirstLastNamePhoneNumberIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. (asynchronously)
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeBatchAsync(BatchFirstLastNamePhoneNumberIn batchFirstLastNamePhoneNumberIn, final ApiCallback<BatchFirstLastNamePhoneCodedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = phoneCodeBatchValidateBeforeCall(batchFirstLastNamePhoneNumberIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phoneCodeGeo
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeGeoCall(String firstName, String lastName, String phoneNumber, String countryIso2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}"
            .replace("{" + "firstName" + "}", localVarApiClient.escapeString(firstName.toString()))
            .replace("{" + "lastName" + "}", localVarApiClient.escapeString(lastName.toString()))
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()))
            .replace("{" + "countryIso2" + "}", localVarApiClient.escapeString(countryIso2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phoneCodeGeoValidateBeforeCall(String firstName, String lastName, String phoneNumber, String countryIso2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling phoneCodeGeo(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling phoneCodeGeo(Async)");
        }

        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling phoneCodeGeo(Async)");
        }

        // verify the required parameter 'countryIso2' is set
        if (countryIso2 == null) {
            throw new ApiException("Missing the required parameter 'countryIso2' when calling phoneCodeGeo(Async)");
        }

        return phoneCodeGeoCall(firstName, lastName, phoneNumber, countryIso2, _callback);

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @return FirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNamePhoneCodedOut phoneCodeGeo(String firstName, String lastName, String phoneNumber, String countryIso2) throws ApiException {
        ApiResponse<FirstLastNamePhoneCodedOut> localVarResp = phoneCodeGeoWithHttpInfo(firstName, lastName, phoneNumber, countryIso2);
        return localVarResp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @return ApiResponse&lt;FirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNamePhoneCodedOut> phoneCodeGeoWithHttpInfo(String firstName, String lastName, String phoneNumber, String countryIso2) throws ApiException {
        okhttp3.Call localVarCall = phoneCodeGeoValidateBeforeCall(firstName, lastName, phoneNumber, countryIso2, null);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param countryIso2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeGeoAsync(String firstName, String lastName, String phoneNumber, String countryIso2, final ApiCallback<FirstLastNamePhoneCodedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = phoneCodeGeoValidateBeforeCall(firstName, lastName, phoneNumber, countryIso2, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phoneCodeGeoBatch
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeGeoBatchCall(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNamePhoneNumberGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeGeoBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phoneCodeGeoBatchValidateBeforeCall(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn, final ApiCallback _callback) throws ApiException {
        return phoneCodeGeoBatchCall(batchFirstLastNamePhoneNumberGeoIn, _callback);

    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @return BatchFirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNamePhoneCodedOut phoneCodeGeoBatch(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResp = phoneCodeGeoBatchWithHttpInfo(batchFirstLastNamePhoneNumberGeoIn);
        return localVarResp.getData();
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNamePhoneCodedOut> phoneCodeGeoBatchWithHttpInfo(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn) throws ApiException {
        okhttp3.Call localVarCall = phoneCodeGeoBatchValidateBeforeCall(batchFirstLastNamePhoneNumberGeoIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). (asynchronously)
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeGeoBatchAsync(BatchFirstLastNamePhoneNumberGeoIn batchFirstLastNamePhoneNumberGeoIn, final ApiCallback<BatchFirstLastNamePhoneCodedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = phoneCodeGeoBatchValidateBeforeCall(batchFirstLastNamePhoneNumberGeoIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNamePhoneCodedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phoneCodeGeoFeedbackLoop
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeGeoFeedbackLoopCall(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}"
            .replace("{" + "firstName" + "}", localVarApiClient.escapeString(firstName.toString()))
            .replace("{" + "lastName" + "}", localVarApiClient.escapeString(lastName.toString()))
            .replace("{" + "phoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()))
            .replace("{" + "phoneNumberE164" + "}", localVarApiClient.escapeString(phoneNumberE164.toString()))
            .replace("{" + "countryIso2" + "}", localVarApiClient.escapeString(countryIso2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phoneCodeGeoFeedbackLoopValidateBeforeCall(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling phoneCodeGeoFeedbackLoop(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling phoneCodeGeoFeedbackLoop(Async)");
        }

        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling phoneCodeGeoFeedbackLoop(Async)");
        }

        // verify the required parameter 'phoneNumberE164' is set
        if (phoneNumberE164 == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberE164' when calling phoneCodeGeoFeedbackLoop(Async)");
        }

        // verify the required parameter 'countryIso2' is set
        if (countryIso2 == null) {
            throw new ApiException("Missing the required parameter 'countryIso2' when calling phoneCodeGeoFeedbackLoop(Async)");
        }

        return phoneCodeGeoFeedbackLoopCall(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, _callback);

    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @return FirstLastNamePhoneCodedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNamePhoneCodedOut phoneCodeGeoFeedbackLoop(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2) throws ApiException {
        ApiResponse<FirstLastNamePhoneCodedOut> localVarResp = phoneCodeGeoFeedbackLoopWithHttpInfo(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2);
        return localVarResp.getData();
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @return ApiResponse&lt;FirstLastNamePhoneCodedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNamePhoneCodedOut> phoneCodeGeoFeedbackLoopWithHttpInfo(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2) throws ApiException {
        okhttp3.Call localVarCall = phoneCodeGeoFeedbackLoopValidateBeforeCall(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, null);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param phoneNumber  (required)
     * @param phoneNumberE164  (required)
     * @param countryIso2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A name with country and phone code. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phoneCodeGeoFeedbackLoopAsync(String firstName, String lastName, String phoneNumber, String phoneNumberE164, String countryIso2, final ApiCallback<FirstLastNamePhoneCodedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = phoneCodeGeoFeedbackLoopValidateBeforeCall(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNamePhoneCodedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
