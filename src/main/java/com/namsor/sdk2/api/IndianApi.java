/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNameCasteOut;
import com.namsor.sdk2.model.BatchFirstLastNameCastegroupOut;
import com.namsor.sdk2.model.BatchFirstLastNameGeoIn;
import com.namsor.sdk2.model.BatchFirstLastNameGeoSubclassificationOut;
import com.namsor.sdk2.model.BatchFirstLastNameGeoSubdivisionIn;
import com.namsor.sdk2.model.BatchFirstLastNameReligionedOut;
import com.namsor.sdk2.model.BatchFirstLastNameSubdivisionIn;
import com.namsor.sdk2.model.BatchPersonalNameCastegroupOut;
import com.namsor.sdk2.model.BatchPersonalNameGeoIn;
import com.namsor.sdk2.model.BatchPersonalNameGeoSubclassificationOut;
import com.namsor.sdk2.model.BatchPersonalNameReligionedOut;
import com.namsor.sdk2.model.BatchPersonalNameSubdivisionIn;
import com.namsor.sdk2.model.FirstLastNameCasteOut;
import com.namsor.sdk2.model.FirstLastNameCastegroupOut;
import com.namsor.sdk2.model.FirstLastNameGeoSubclassificationOut;
import com.namsor.sdk2.model.FirstLastNameReligionedOut;
import com.namsor.sdk2.model.PersonalNameCastegroupOut;
import com.namsor.sdk2.model.PersonalNameGeoSubclassificationOut;
import com.namsor.sdk2.model.PersonalNameReligionedOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IndianApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IndianApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IndianApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for casteIndianBatch
     * @param batchFirstLastNameGeoSubdivisionIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call casteIndianBatchCall(BatchFirstLastNameGeoSubdivisionIn batchFirstLastNameGeoSubdivisionIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameGeoSubdivisionIn;

        // create path and map variables
        String localVarPath = "/api2/json/casteIndianBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call casteIndianBatchValidateBeforeCall(BatchFirstLastNameGeoSubdivisionIn batchFirstLastNameGeoSubdivisionIn, final ApiCallback _callback) throws ApiException {
        return casteIndianBatchCall(batchFirstLastNameGeoSubdivisionIn, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
     * 
     * @param batchFirstLastNameGeoSubdivisionIn A list of personal names (optional)
     * @return BatchFirstLastNameCasteOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNameCasteOut casteIndianBatch(BatchFirstLastNameGeoSubdivisionIn batchFirstLastNameGeoSubdivisionIn) throws ApiException {
        ApiResponse<BatchFirstLastNameCasteOut> localVarResp = casteIndianBatchWithHttpInfo(batchFirstLastNameGeoSubdivisionIn);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
     * 
     * @param batchFirstLastNameGeoSubdivisionIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameCasteOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNameCasteOut> casteIndianBatchWithHttpInfo(BatchFirstLastNameGeoSubdivisionIn batchFirstLastNameGeoSubdivisionIn) throws ApiException {
        okhttp3.Call localVarCall = casteIndianBatchValidateBeforeCall(batchFirstLastNameGeoSubdivisionIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameCasteOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names.  (asynchronously)
     * 
     * @param batchFirstLastNameGeoSubdivisionIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call casteIndianBatchAsync(BatchFirstLastNameGeoSubdivisionIn batchFirstLastNameGeoSubdivisionIn, final ApiCallback<BatchFirstLastNameCasteOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = casteIndianBatchValidateBeforeCall(batchFirstLastNameGeoSubdivisionIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameCasteOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for castegroupIndian
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianCall(String subDivisionIso31662, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/castegroupIndian/{subDivisionIso31662}/{firstName}/{lastName}"
            .replace("{" + "subDivisionIso31662" + "}", localVarApiClient.escapeString(subDivisionIso31662.toString()))
            .replace("{" + "firstName" + "}", localVarApiClient.escapeString(firstName.toString()))
            .replace("{" + "lastName" + "}", localVarApiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call castegroupIndianValidateBeforeCall(String subDivisionIso31662, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subDivisionIso31662' is set
        if (subDivisionIso31662 == null) {
            throw new ApiException("Missing the required parameter 'subDivisionIso31662' when calling castegroupIndian(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling castegroupIndian(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling castegroupIndian(Async)");
        }

        return castegroupIndianCall(subDivisionIso31662, firstName, lastName, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameCastegroupOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNameCastegroupOut castegroupIndian(String subDivisionIso31662, String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameCastegroupOut> localVarResp = castegroupIndianWithHttpInfo(subDivisionIso31662, firstName, lastName);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameCastegroupOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNameCastegroupOut> castegroupIndianWithHttpInfo(String subDivisionIso31662, String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = castegroupIndianValidateBeforeCall(subDivisionIso31662, firstName, lastName, null);
        Type localVarReturnType = new TypeToken<FirstLastNameCastegroupOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name. (asynchronously)
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianAsync(String subDivisionIso31662, String firstName, String lastName, final ApiCallback<FirstLastNameCastegroupOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = castegroupIndianValidateBeforeCall(subDivisionIso31662, firstName, lastName, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNameCastegroupOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for castegroupIndianBatch
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianBatchCall(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameSubdivisionIn;

        // create path and map variables
        String localVarPath = "/api2/json/castegroupIndianBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call castegroupIndianBatchValidateBeforeCall(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        return castegroupIndianBatchCall(batchFirstLastNameSubdivisionIn, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return BatchFirstLastNameCastegroupOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNameCastegroupOut castegroupIndianBatch(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn) throws ApiException {
        ApiResponse<BatchFirstLastNameCastegroupOut> localVarResp = castegroupIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameCastegroupOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNameCastegroupOut> castegroupIndianBatchWithHttpInfo(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn) throws ApiException {
        okhttp3.Call localVarCall = castegroupIndianBatchValidateBeforeCall(batchFirstLastNameSubdivisionIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameCastegroupOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names.  (asynchronously)
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianBatchAsync(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn, final ApiCallback<BatchFirstLastNameCastegroupOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = castegroupIndianBatchValidateBeforeCall(batchFirstLastNameSubdivisionIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameCastegroupOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for castegroupIndianFull
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianFullCall(String subDivisionIso31662, String personalNameFull, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}"
            .replace("{" + "subDivisionIso31662" + "}", localVarApiClient.escapeString(subDivisionIso31662.toString()))
            .replace("{" + "personalNameFull" + "}", localVarApiClient.escapeString(personalNameFull.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call castegroupIndianFullValidateBeforeCall(String subDivisionIso31662, String personalNameFull, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subDivisionIso31662' is set
        if (subDivisionIso31662 == null) {
            throw new ApiException("Missing the required parameter 'subDivisionIso31662' when calling castegroupIndianFull(Async)");
        }

        // verify the required parameter 'personalNameFull' is set
        if (personalNameFull == null) {
            throw new ApiException("Missing the required parameter 'personalNameFull' when calling castegroupIndianFull(Async)");
        }

        return castegroupIndianFullCall(subDivisionIso31662, personalNameFull, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return PersonalNameCastegroupOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameCastegroupOut castegroupIndianFull(String subDivisionIso31662, String personalNameFull) throws ApiException {
        ApiResponse<PersonalNameCastegroupOut> localVarResp = castegroupIndianFullWithHttpInfo(subDivisionIso31662, personalNameFull);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return ApiResponse&lt;PersonalNameCastegroupOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameCastegroupOut> castegroupIndianFullWithHttpInfo(String subDivisionIso31662, String personalNameFull) throws ApiException {
        okhttp3.Call localVarCall = castegroupIndianFullValidateBeforeCall(subDivisionIso31662, personalNameFull, null);
        Type localVarReturnType = new TypeToken<PersonalNameCastegroupOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. (asynchronously)
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A castegroup-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianFullAsync(String subDivisionIso31662, String personalNameFull, final ApiCallback<PersonalNameCastegroupOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = castegroupIndianFullValidateBeforeCall(subDivisionIso31662, personalNameFull, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameCastegroupOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for castegroupIndianFullBatch
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianFullBatchCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameSubdivisionIn;

        // create path and map variables
        String localVarPath = "/api2/json/castegroupIndianFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call castegroupIndianFullBatchValidateBeforeCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        return castegroupIndianFullBatchCall(batchPersonalNameSubdivisionIn, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return BatchPersonalNameCastegroupOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameCastegroupOut castegroupIndianFullBatch(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        ApiResponse<BatchPersonalNameCastegroupOut> localVarResp = castegroupIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameCastegroupOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameCastegroupOut> castegroupIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        okhttp3.Call localVarCall = castegroupIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameCastegroupOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  (asynchronously)
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of castegroup-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianFullBatchAsync(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback<BatchPersonalNameCastegroupOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = castegroupIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameCastegroupOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for castegroupIndianHindu
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A caste-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianHinduCall(String subDivisionIso31662, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/casteIndian/{subDivisionIso31662}/{firstName}/{lastName}"
            .replace("{" + "subDivisionIso31662" + "}", localVarApiClient.escapeString(subDivisionIso31662.toString()))
            .replace("{" + "firstName" + "}", localVarApiClient.escapeString(firstName.toString()))
            .replace("{" + "lastName" + "}", localVarApiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call castegroupIndianHinduValidateBeforeCall(String subDivisionIso31662, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subDivisionIso31662' is set
        if (subDivisionIso31662 == null) {
            throw new ApiException("Missing the required parameter 'subDivisionIso31662' when calling castegroupIndianHindu(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling castegroupIndianHindu(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling castegroupIndianHindu(Async)");
        }

        return castegroupIndianHinduCall(subDivisionIso31662, firstName, lastName, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameCasteOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A caste-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNameCasteOut castegroupIndianHindu(String subDivisionIso31662, String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameCasteOut> localVarResp = castegroupIndianHinduWithHttpInfo(subDivisionIso31662, firstName, lastName);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameCasteOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A caste-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNameCasteOut> castegroupIndianHinduWithHttpInfo(String subDivisionIso31662, String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = castegroupIndianHinduValidateBeforeCall(subDivisionIso31662, firstName, lastName, null);
        Type localVarReturnType = new TypeToken<FirstLastNameCasteOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name. (asynchronously)
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A caste-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castegroupIndianHinduAsync(String subDivisionIso31662, String firstName, String lastName, final ApiCallback<FirstLastNameCasteOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = castegroupIndianHinduValidateBeforeCall(subDivisionIso31662, firstName, lastName, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNameCasteOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for religion
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religionCall(String subDivisionIso31662, String personalNameFull, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}"
            .replace("{" + "subDivisionIso31662" + "}", localVarApiClient.escapeString(subDivisionIso31662.toString()))
            .replace("{" + "personalNameFull" + "}", localVarApiClient.escapeString(personalNameFull.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call religionValidateBeforeCall(String subDivisionIso31662, String personalNameFull, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subDivisionIso31662' is set
        if (subDivisionIso31662 == null) {
            throw new ApiException("Missing the required parameter 'subDivisionIso31662' when calling religion(Async)");
        }

        // verify the required parameter 'personalNameFull' is set
        if (personalNameFull == null) {
            throw new ApiException("Missing the required parameter 'personalNameFull' when calling religion(Async)");
        }

        return religionCall(subDivisionIso31662, personalNameFull, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return PersonalNameReligionedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameReligionedOut religion(String subDivisionIso31662, String personalNameFull) throws ApiException {
        ApiResponse<PersonalNameReligionedOut> localVarResp = religionWithHttpInfo(subDivisionIso31662, personalNameFull);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return ApiResponse&lt;PersonalNameReligionedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameReligionedOut> religionWithHttpInfo(String subDivisionIso31662, String personalNameFull) throws ApiException {
        okhttp3.Call localVarCall = religionValidateBeforeCall(subDivisionIso31662, personalNameFull, null);
        Type localVarReturnType = new TypeToken<PersonalNameReligionedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). (asynchronously)
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religionAsync(String subDivisionIso31662, String personalNameFull, final ApiCallback<PersonalNameReligionedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = religionValidateBeforeCall(subDivisionIso31662, personalNameFull, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameReligionedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for religion1
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religion1Call(String subDivisionIso31662, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/religionIndian/{subDivisionIso31662}/{firstName}/{lastName}"
            .replace("{" + "subDivisionIso31662" + "}", localVarApiClient.escapeString(subDivisionIso31662.toString()))
            .replace("{" + "firstName" + "}", localVarApiClient.escapeString(firstName.toString()))
            .replace("{" + "lastName" + "}", localVarApiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call religion1ValidateBeforeCall(String subDivisionIso31662, String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subDivisionIso31662' is set
        if (subDivisionIso31662 == null) {
            throw new ApiException("Missing the required parameter 'subDivisionIso31662' when calling religion1(Async)");
        }

        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling religion1(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling religion1(Async)");
        }

        return religion1Call(subDivisionIso31662, firstName, lastName, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameReligionedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNameReligionedOut religion1(String subDivisionIso31662, String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameReligionedOut> localVarResp = religion1WithHttpInfo(subDivisionIso31662, firstName, lastName);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameReligionedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNameReligionedOut> religion1WithHttpInfo(String subDivisionIso31662, String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = religion1ValidateBeforeCall(subDivisionIso31662, firstName, lastName, null);
        Type localVarReturnType = new TypeToken<FirstLastNameReligionedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). (asynchronously)
     * 
     * @param subDivisionIso31662  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A religion-coded name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religion1Async(String subDivisionIso31662, String firstName, String lastName, final ApiCallback<FirstLastNameReligionedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = religion1ValidateBeforeCall(subDivisionIso31662, firstName, lastName, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNameReligionedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for religionIndianBatch
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religionIndianBatchCall(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameSubdivisionIn;

        // create path and map variables
        String localVarPath = "/api2/json/religionIndianBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call religionIndianBatchValidateBeforeCall(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        return religionIndianBatchCall(batchFirstLastNameSubdivisionIn, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return BatchFirstLastNameReligionedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNameReligionedOut religionIndianBatch(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn) throws ApiException {
        ApiResponse<BatchFirstLastNameReligionedOut> localVarResp = religionIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameReligionedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNameReligionedOut> religionIndianBatchWithHttpInfo(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn) throws ApiException {
        okhttp3.Call localVarCall = religionIndianBatchValidateBeforeCall(batchFirstLastNameSubdivisionIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameReligionedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). (asynchronously)
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religionIndianBatchAsync(BatchFirstLastNameSubdivisionIn batchFirstLastNameSubdivisionIn, final ApiCallback<BatchFirstLastNameReligionedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = religionIndianBatchValidateBeforeCall(batchFirstLastNameSubdivisionIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameReligionedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for religionIndianFullBatch
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religionIndianFullBatchCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameSubdivisionIn;

        // create path and map variables
        String localVarPath = "/api2/json/religionIndianFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call religionIndianFullBatchValidateBeforeCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback _callback) throws ApiException {
        return religionIndianFullBatchCall(batchPersonalNameSubdivisionIn, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return BatchPersonalNameReligionedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameReligionedOut religionIndianFullBatch(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        ApiResponse<BatchPersonalNameReligionedOut> localVarResp = religionIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameReligionedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameReligionedOut> religionIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        okhttp3.Call localVarCall = religionIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameReligionedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). (asynchronously)
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of religion-coded names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call religionIndianFullBatchAsync(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback<BatchPersonalNameReligionedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = religionIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameReligionedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subclassificationIndian
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianCall(String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndian/{firstName}/{lastName}"
            .replace("{" + "firstName" + "}", localVarApiClient.escapeString(firstName.toString()))
            .replace("{" + "lastName" + "}", localVarApiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subclassificationIndianValidateBeforeCall(String firstName, String lastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling subclassificationIndian(Async)");
        }

        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling subclassificationIndian(Async)");
        }

        return subclassificationIndianCall(firstName, lastName, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNameGeoSubclassificationOut subclassificationIndian(String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameGeoSubclassificationOut> localVarResp = subclassificationIndianWithHttpInfo(firstName, lastName);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNameGeoSubclassificationOut> subclassificationIndianWithHttpInfo(String firstName, String lastName) throws ApiException {
        okhttp3.Call localVarCall = subclassificationIndianValidateBeforeCall(firstName, lastName, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGeoSubclassificationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianAsync(String firstName, String lastName, final ApiCallback<FirstLastNameGeoSubclassificationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = subclassificationIndianValidateBeforeCall(firstName, lastName, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNameGeoSubclassificationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subclassificationIndianBatch
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianBatchCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndianBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subclassificationIndianBatchValidateBeforeCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ApiCallback _callback) throws ApiException {
        return subclassificationIndianBatchCall(batchFirstLastNameGeoIn, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return BatchFirstLastNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNameGeoSubclassificationOut subclassificationIndianBatch(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGeoSubclassificationOut> localVarResp = subclassificationIndianBatchWithHttpInfo(batchFirstLastNameGeoIn);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNameGeoSubclassificationOut> subclassificationIndianBatchWithHttpInfo(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        okhttp3.Call localVarCall = subclassificationIndianBatchValidateBeforeCall(batchFirstLastNameGeoIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGeoSubclassificationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. (asynchronously)
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianBatchAsync(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ApiCallback<BatchFirstLastNameGeoSubclassificationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = subclassificationIndianBatchValidateBeforeCall(batchFirstLastNameGeoIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGeoSubclassificationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subclassificationIndianFull
     * @param fullName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianFullCall(String fullName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndianFull/{fullName}"
            .replace("{" + "fullName" + "}", localVarApiClient.escapeString(fullName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subclassificationIndianFullValidateBeforeCall(String fullName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fullName' is set
        if (fullName == null) {
            throw new ApiException("Missing the required parameter 'fullName' when calling subclassificationIndianFull(Async)");
        }

        return subclassificationIndianFullCall(fullName, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param fullName  (required)
     * @return PersonalNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameGeoSubclassificationOut subclassificationIndianFull(String fullName) throws ApiException {
        ApiResponse<PersonalNameGeoSubclassificationOut> localVarResp = subclassificationIndianFullWithHttpInfo(fullName);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param fullName  (required)
     * @return ApiResponse&lt;PersonalNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameGeoSubclassificationOut> subclassificationIndianFullWithHttpInfo(String fullName) throws ApiException {
        okhttp3.Call localVarCall = subclassificationIndianFullValidateBeforeCall(fullName, null);
        Type localVarReturnType = new TypeToken<PersonalNameGeoSubclassificationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. (asynchronously)
     * 
     * @param fullName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A classified name at a sub-country level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianFullAsync(String fullName, final ApiCallback<PersonalNameGeoSubclassificationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = subclassificationIndianFullValidateBeforeCall(fullName, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameGeoSubclassificationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subclassificationIndianFullBatch
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianFullBatchCall(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndianFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subclassificationIndianFullBatchValidateBeforeCall(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ApiCallback _callback) throws ApiException {
        return subclassificationIndianFullBatchCall(batchPersonalNameGeoIn, _callback);

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @return BatchPersonalNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameGeoSubclassificationOut subclassificationIndianFullBatch(BatchPersonalNameGeoIn batchPersonalNameGeoIn) throws ApiException {
        ApiResponse<BatchPersonalNameGeoSubclassificationOut> localVarResp = subclassificationIndianFullBatchWithHttpInfo(batchPersonalNameGeoIn);
        return localVarResp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameGeoSubclassificationOut> subclassificationIndianFullBatchWithHttpInfo(BatchPersonalNameGeoIn batchPersonalNameGeoIn) throws ApiException {
        okhttp3.Call localVarCall = subclassificationIndianFullBatchValidateBeforeCall(batchPersonalNameGeoIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGeoSubclassificationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. (asynchronously)
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of classified names at a subcountry level. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subclassificationIndianFullBatchAsync(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ApiCallback<BatchPersonalNameGeoSubclassificationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = subclassificationIndianFullBatchValidateBeforeCall(batchPersonalNameGeoIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGeoSubclassificationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
