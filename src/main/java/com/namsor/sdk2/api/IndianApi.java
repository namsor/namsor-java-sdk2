/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.26
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNameGeoIn;
import com.namsor.sdk2.model.BatchFirstLastNameGeoSubclassificationOut;
import com.namsor.sdk2.model.BatchPersonalNameCastegroupOut;
import com.namsor.sdk2.model.BatchPersonalNameGeoIn;
import com.namsor.sdk2.model.BatchPersonalNameGeoSubclassificationOut;
import com.namsor.sdk2.model.BatchPersonalNameReligionedOut;
import com.namsor.sdk2.model.BatchPersonalNameSubdivisionIn;
import com.namsor.sdk2.model.FirstLastNameGeoSubclassificationOut;
import com.namsor.sdk2.model.PersonalNameCastegroupOut;
import com.namsor.sdk2.model.PersonalNameGeoSubclassificationOut;
import com.namsor.sdk2.model.PersonalNameReligionedOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IndianApi {
    private ApiClient apiClient;

    public IndianApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IndianApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for castegroupIndianFull
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call castegroupIndianFullCall(String subDivisionIso31662, String personalNameFull, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}"
            .replaceAll("\\{" + "subDivisionIso31662" + "\\}", apiClient.escapeString(subDivisionIso31662.toString()))
            .replaceAll("\\{" + "personalNameFull" + "\\}", apiClient.escapeString(personalNameFull.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call castegroupIndianFullValidateBeforeCall(String subDivisionIso31662, String personalNameFull, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subDivisionIso31662' is set
        if (subDivisionIso31662 == null) {
            throw new ApiException("Missing the required parameter 'subDivisionIso31662' when calling castegroupIndianFull(Async)");
        }
        
        // verify the required parameter 'personalNameFull' is set
        if (personalNameFull == null) {
            throw new ApiException("Missing the required parameter 'personalNameFull' when calling castegroupIndianFull(Async)");
        }
        

        com.squareup.okhttp.Call call = castegroupIndianFullCall(subDivisionIso31662, personalNameFull, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return PersonalNameCastegroupOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalNameCastegroupOut castegroupIndianFull(String subDivisionIso31662, String personalNameFull) throws ApiException {
        ApiResponse<PersonalNameCastegroupOut> resp = castegroupIndianFullWithHttpInfo(subDivisionIso31662, personalNameFull);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return ApiResponse&lt;PersonalNameCastegroupOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalNameCastegroupOut> castegroupIndianFullWithHttpInfo(String subDivisionIso31662, String personalNameFull) throws ApiException {
        com.squareup.okhttp.Call call = castegroupIndianFullValidateBeforeCall(subDivisionIso31662, personalNameFull, null, null);
        Type localVarReturnType = new TypeToken<PersonalNameCastegroupOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. (asynchronously)
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call castegroupIndianFullAsync(String subDivisionIso31662, String personalNameFull, final ApiCallback<PersonalNameCastegroupOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = castegroupIndianFullValidateBeforeCall(subDivisionIso31662, personalNameFull, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalNameCastegroupOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for castegroupIndianFullBatch
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call castegroupIndianFullBatchCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameSubdivisionIn;

        // create path and map variables
        String localVarPath = "/api2/json/castegroupIndianFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call castegroupIndianFullBatchValidateBeforeCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = castegroupIndianFullBatchCall(batchPersonalNameSubdivisionIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return BatchPersonalNameCastegroupOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameCastegroupOut castegroupIndianFullBatch(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        ApiResponse<BatchPersonalNameCastegroupOut> resp = castegroupIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameCastegroupOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameCastegroupOut> castegroupIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        com.squareup.okhttp.Call call = castegroupIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameCastegroupOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  (asynchronously)
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call castegroupIndianFullBatchAsync(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback<BatchPersonalNameCastegroupOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = castegroupIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameCastegroupOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for religion
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call religionCall(String subDivisionIso31662, String personalNameFull, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}"
            .replaceAll("\\{" + "subDivisionIso31662" + "\\}", apiClient.escapeString(subDivisionIso31662.toString()))
            .replaceAll("\\{" + "personalNameFull" + "\\}", apiClient.escapeString(personalNameFull.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call religionValidateBeforeCall(String subDivisionIso31662, String personalNameFull, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subDivisionIso31662' is set
        if (subDivisionIso31662 == null) {
            throw new ApiException("Missing the required parameter 'subDivisionIso31662' when calling religion(Async)");
        }
        
        // verify the required parameter 'personalNameFull' is set
        if (personalNameFull == null) {
            throw new ApiException("Missing the required parameter 'personalNameFull' when calling religion(Async)");
        }
        

        com.squareup.okhttp.Call call = religionCall(subDivisionIso31662, personalNameFull, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return PersonalNameReligionedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalNameReligionedOut religion(String subDivisionIso31662, String personalNameFull) throws ApiException {
        ApiResponse<PersonalNameReligionedOut> resp = religionWithHttpInfo(subDivisionIso31662, personalNameFull);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @return ApiResponse&lt;PersonalNameReligionedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalNameReligionedOut> religionWithHttpInfo(String subDivisionIso31662, String personalNameFull) throws ApiException {
        com.squareup.okhttp.Call call = religionValidateBeforeCall(subDivisionIso31662, personalNameFull, null, null);
        Type localVarReturnType = new TypeToken<PersonalNameReligionedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). (asynchronously)
     * 
     * @param subDivisionIso31662  (required)
     * @param personalNameFull  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call religionAsync(String subDivisionIso31662, String personalNameFull, final ApiCallback<PersonalNameReligionedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = religionValidateBeforeCall(subDivisionIso31662, personalNameFull, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalNameReligionedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for religionIndianFullBatch
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call religionIndianFullBatchCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameSubdivisionIn;

        // create path and map variables
        String localVarPath = "/api2/json/religionIndianFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call religionIndianFullBatchValidateBeforeCall(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = religionIndianFullBatchCall(batchPersonalNameSubdivisionIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return BatchPersonalNameReligionedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameReligionedOut religionIndianFullBatch(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        ApiResponse<BatchPersonalNameReligionedOut> resp = religionIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameReligionedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameReligionedOut> religionIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn) throws ApiException {
        com.squareup.okhttp.Call call = religionIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameReligionedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). (asynchronously)
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call religionIndianFullBatchAsync(BatchPersonalNameSubdivisionIn batchPersonalNameSubdivisionIn, final ApiCallback<BatchPersonalNameReligionedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = religionIndianFullBatchValidateBeforeCall(batchPersonalNameSubdivisionIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameReligionedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subclassificationIndian
     * @param firstName  (required)
     * @param lastName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndian/{firstName}/{lastName}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subclassificationIndianValidateBeforeCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling subclassificationIndian(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling subclassificationIndian(Async)");
        }
        

        com.squareup.okhttp.Call call = subclassificationIndianCall(firstName, lastName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameGeoSubclassificationOut subclassificationIndian(String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameGeoSubclassificationOut> resp = subclassificationIndianWithHttpInfo(firstName, lastName);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameGeoSubclassificationOut> subclassificationIndianWithHttpInfo(String firstName, String lastName) throws ApiException {
        com.squareup.okhttp.Call call = subclassificationIndianValidateBeforeCall(firstName, lastName, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGeoSubclassificationOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianAsync(String firstName, String lastName, final ApiCallback<FirstLastNameGeoSubclassificationOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subclassificationIndianValidateBeforeCall(firstName, lastName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameGeoSubclassificationOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subclassificationIndianBatch
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianBatchCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndianBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subclassificationIndianBatchValidateBeforeCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = subclassificationIndianBatchCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return BatchFirstLastNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameGeoSubclassificationOut subclassificationIndianBatch(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGeoSubclassificationOut> resp = subclassificationIndianBatchWithHttpInfo(batchFirstLastNameGeoIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameGeoSubclassificationOut> subclassificationIndianBatchWithHttpInfo(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = subclassificationIndianBatchValidateBeforeCall(batchFirstLastNameGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGeoSubclassificationOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. (asynchronously)
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianBatchAsync(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ApiCallback<BatchFirstLastNameGeoSubclassificationOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subclassificationIndianBatchValidateBeforeCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGeoSubclassificationOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subclassificationIndianFull
     * @param fullName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianFullCall(String fullName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndianFull/{fullName}"
            .replaceAll("\\{" + "fullName" + "\\}", apiClient.escapeString(fullName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subclassificationIndianFullValidateBeforeCall(String fullName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fullName' is set
        if (fullName == null) {
            throw new ApiException("Missing the required parameter 'fullName' when calling subclassificationIndianFull(Async)");
        }
        

        com.squareup.okhttp.Call call = subclassificationIndianFullCall(fullName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param fullName  (required)
     * @return PersonalNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalNameGeoSubclassificationOut subclassificationIndianFull(String fullName) throws ApiException {
        ApiResponse<PersonalNameGeoSubclassificationOut> resp = subclassificationIndianFullWithHttpInfo(fullName);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param fullName  (required)
     * @return ApiResponse&lt;PersonalNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalNameGeoSubclassificationOut> subclassificationIndianFullWithHttpInfo(String fullName) throws ApiException {
        com.squareup.okhttp.Call call = subclassificationIndianFullValidateBeforeCall(fullName, null, null);
        Type localVarReturnType = new TypeToken<PersonalNameGeoSubclassificationOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. (asynchronously)
     * 
     * @param fullName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianFullAsync(String fullName, final ApiCallback<PersonalNameGeoSubclassificationOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subclassificationIndianFullValidateBeforeCall(fullName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalNameGeoSubclassificationOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subclassificationIndianFullBatch
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianFullBatchCall(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/subclassificationIndianFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subclassificationIndianFullBatchValidateBeforeCall(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = subclassificationIndianFullBatchCall(batchPersonalNameGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @return BatchPersonalNameGeoSubclassificationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameGeoSubclassificationOut subclassificationIndianFullBatch(BatchPersonalNameGeoIn batchPersonalNameGeoIn) throws ApiException {
        ApiResponse<BatchPersonalNameGeoSubclassificationOut> resp = subclassificationIndianFullBatchWithHttpInfo(batchPersonalNameGeoIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameGeoSubclassificationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameGeoSubclassificationOut> subclassificationIndianFullBatchWithHttpInfo(BatchPersonalNameGeoIn batchPersonalNameGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = subclassificationIndianFullBatchValidateBeforeCall(batchPersonalNameGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGeoSubclassificationOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. (asynchronously)
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subclassificationIndianFullBatchAsync(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ApiCallback<BatchPersonalNameGeoSubclassificationOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subclassificationIndianFullBatchValidateBeforeCall(batchPersonalNameGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGeoSubclassificationOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
