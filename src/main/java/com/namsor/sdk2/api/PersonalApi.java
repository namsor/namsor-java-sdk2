/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.2-beta
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNameDiasporaedOut;
import com.namsor.sdk2.model.BatchFirstLastNameGenderedOut;
import com.namsor.sdk2.model.BatchFirstLastNameGeoIn;
import com.namsor.sdk2.model.BatchFirstLastNameGeoZippedIn;
import com.namsor.sdk2.model.BatchFirstLastNameIn;
import com.namsor.sdk2.model.BatchFirstLastNameOriginedOut;
import com.namsor.sdk2.model.BatchFirstLastNameUSRaceEthnicityOut;
import com.namsor.sdk2.model.BatchParsedFullNameGeoIn;
import com.namsor.sdk2.model.BatchParsedFullNameIn;
import com.namsor.sdk2.model.BatchPersonalNameGenderedOut;
import com.namsor.sdk2.model.BatchPersonalNameGeoIn;
import com.namsor.sdk2.model.BatchPersonalNameGeoOut;
import com.namsor.sdk2.model.BatchPersonalNameIn;
import com.namsor.sdk2.model.FirstLastNameDiasporaedOut;
import com.namsor.sdk2.model.FirstLastNameGenderedOut;
import com.namsor.sdk2.model.FirstLastNameOriginedOut;
import com.namsor.sdk2.model.FirstLastNameUSRaceEthnicityOut;
import com.namsor.sdk2.model.PersonalNameGeoOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonalApi {
    private ApiClient apiClient;

    public PersonalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for country
     * @param personalNameFull  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call countryCall(String personalNameFull, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/country/{personalNameFull}"
            .replaceAll("\\{" + "personalNameFull" + "\\}", apiClient.escapeString(personalNameFull.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countryValidateBeforeCall(String personalNameFull, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'personalNameFull' is set
        if (personalNameFull == null) {
            throw new ApiException("Missing the required parameter 'personalNameFull' when calling country(Async)");
        }
        

        com.squareup.okhttp.Call call = countryCall(personalNameFull, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
     * 
     * @param personalNameFull  (required)
     * @return PersonalNameGeoOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalNameGeoOut country(String personalNameFull) throws ApiException {
        ApiResponse<PersonalNameGeoOut> resp = countryWithHttpInfo(personalNameFull);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
     * 
     * @param personalNameFull  (required)
     * @return ApiResponse&lt;PersonalNameGeoOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalNameGeoOut> countryWithHttpInfo(String personalNameFull) throws ApiException {
        com.squareup.okhttp.Call call = countryValidateBeforeCall(personalNameFull, null, null);
        Type localVarReturnType = new TypeToken<PersonalNameGeoOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. (asynchronously)
     * 
     * @param personalNameFull  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countryAsync(String personalNameFull, final ApiCallback<PersonalNameGeoOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countryValidateBeforeCall(personalNameFull, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalNameGeoOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for countryBatch
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call countryBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/countryBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call countryBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = countryBatchCall(batchPersonalNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer the likely country of residence of up to 1000 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return BatchPersonalNameGeoOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameGeoOut countryBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameGeoOut> resp = countryBatchWithHttpInfo(batchPersonalNameIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer the likely country of residence of up to 1000 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameGeoOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameGeoOut> countryBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        com.squareup.okhttp.Call call = countryBatchValidateBeforeCall(batchPersonalNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGeoOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer the likely country of residence of up to 1000 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call countryBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameGeoOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = countryBatchValidateBeforeCall(batchPersonalNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGeoOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for diaspora
     * @param countryIso2  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call diasporaCall(String countryIso2, String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}"
            .replaceAll("\\{" + "countryIso2" + "\\}", apiClient.escapeString(countryIso2.toString()))
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call diasporaValidateBeforeCall(String countryIso2, String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'countryIso2' is set
        if (countryIso2 == null) {
            throw new ApiException("Missing the required parameter 'countryIso2' when calling diaspora(Async)");
        }
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling diaspora(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling diaspora(Async)");
        }
        

        com.squareup.okhttp.Call call = diasporaCall(countryIso2, firstName, lastName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 20 UNITS] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * 
     * @param countryIso2  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameDiasporaedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameDiasporaedOut diaspora(String countryIso2, String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameDiasporaedOut> resp = diasporaWithHttpInfo(countryIso2, firstName, lastName);
        return resp.getData();
    }

    /**
     * [USES 20 UNITS] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * 
     * @param countryIso2  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameDiasporaedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameDiasporaedOut> diasporaWithHttpInfo(String countryIso2, String firstName, String lastName) throws ApiException {
        com.squareup.okhttp.Call call = diasporaValidateBeforeCall(countryIso2, firstName, lastName, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameDiasporaedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 20 UNITS] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) (asynchronously)
     * 
     * @param countryIso2  (required)
     * @param firstName  (required)
     * @param lastName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call diasporaAsync(String countryIso2, String firstName, String lastName, final ApiCallback<FirstLastNameDiasporaedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = diasporaValidateBeforeCall(countryIso2, firstName, lastName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameDiasporaedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for diasporaBatch
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call diasporaBatchCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/diasporaBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call diasporaBatchValidateBeforeCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = diasporaBatchCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 20 UNITS] Infer the likely ethnicity/diaspora of up to 1000 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return BatchFirstLastNameDiasporaedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameDiasporaedOut diasporaBatch(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNameDiasporaedOut> resp = diasporaBatchWithHttpInfo(batchFirstLastNameGeoIn);
        return resp.getData();
    }

    /**
     * [USES 20 UNITS] Infer the likely ethnicity/diaspora of up to 1000 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameDiasporaedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameDiasporaedOut> diasporaBatchWithHttpInfo(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = diasporaBatchValidateBeforeCall(batchFirstLastNameGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameDiasporaedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 20 UNITS] Infer the likely ethnicity/diaspora of up to 1000 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) (asynchronously)
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call diasporaBatchAsync(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ApiCallback<BatchFirstLastNameDiasporaedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = diasporaBatchValidateBeforeCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameDiasporaedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for gender
     * @param firstName  (required)
     * @param lastName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/gender/{firstName}/{lastName}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderValidateBeforeCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling gender(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling gender(Async)");
        }
        

        com.squareup.okhttp.Call call = genderCall(firstName, lastName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of a name.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameGenderedOut gender(String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameGenderedOut> resp = genderWithHttpInfo(firstName, lastName);
        return resp.getData();
    }

    /**
     * Infer the likely gender of a name.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameGenderedOut> genderWithHttpInfo(String firstName, String lastName) throws ApiException {
        com.squareup.okhttp.Call call = genderValidateBeforeCall(firstName, lastName, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of a name. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderAsync(String firstName, String lastName, final ApiCallback<FirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderValidateBeforeCall(firstName, lastName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderBatch
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = genderBatchCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 1000 names, detecting automatically the cultural context.
     * 
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @return BatchFirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameGenderedOut genderBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGenderedOut> resp = genderBatchWithHttpInfo(batchFirstLastNameIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 1000 names, detecting automatically the cultural context.
     * 
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameGenderedOut> genderBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        com.squareup.okhttp.Call call = genderBatchValidateBeforeCall(batchFirstLastNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 1000 names, detecting automatically the cultural context. (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchFirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderBatchValidateBeforeCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderFull
     * @param fullName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderFullCall(String fullName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/genderFull/{fullName}"
            .replaceAll("\\{" + "fullName" + "\\}", apiClient.escapeString(fullName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderFullValidateBeforeCall(String fullName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fullName' is set
        if (fullName == null) {
            throw new ApiException("Missing the required parameter 'fullName' when calling genderFull(Async)");
        }
        

        com.squareup.okhttp.Call call = genderFullCall(fullName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of a full name, ex. John H. Smith
     * 
     * @param fullName  (required)
     * @return FirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameGenderedOut genderFull(String fullName) throws ApiException {
        ApiResponse<FirstLastNameGenderedOut> resp = genderFullWithHttpInfo(fullName);
        return resp.getData();
    }

    /**
     * Infer the likely gender of a full name, ex. John H. Smith
     * 
     * @param fullName  (required)
     * @return ApiResponse&lt;FirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameGenderedOut> genderFullWithHttpInfo(String fullName) throws ApiException {
        com.squareup.okhttp.Call call = genderFullValidateBeforeCall(fullName, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of a full name, ex. John H. Smith (asynchronously)
     * 
     * @param fullName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderFullAsync(String fullName, final ApiCallback<FirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderFullValidateBeforeCall(fullName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderFullBatch
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderFullBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderFullBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = genderFullBatchCall(batchPersonalNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 1000 full names, detecting automatically the cultural context.
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return BatchPersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameGenderedOut genderFullBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameGenderedOut> resp = genderFullBatchWithHttpInfo(batchPersonalNameIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 1000 full names, detecting automatically the cultural context.
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameGenderedOut> genderFullBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        com.squareup.okhttp.Call call = genderFullBatchValidateBeforeCall(batchPersonalNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 1000 full names, detecting automatically the cultural context. (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderFullBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderFullBatchValidateBeforeCall(batchPersonalNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderFullGeo
     * @param fullName  (required)
     * @param countryIso2  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderFullGeoCall(String fullName, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/genderFullGeo/{fullName}/{countryIso2}"
            .replaceAll("\\{" + "fullName" + "\\}", apiClient.escapeString(fullName.toString()))
            .replaceAll("\\{" + "countryIso2" + "\\}", apiClient.escapeString(countryIso2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderFullGeoValidateBeforeCall(String fullName, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fullName' is set
        if (fullName == null) {
            throw new ApiException("Missing the required parameter 'fullName' when calling genderFullGeo(Async)");
        }
        
        // verify the required parameter 'countryIso2' is set
        if (countryIso2 == null) {
            throw new ApiException("Missing the required parameter 'countryIso2' when calling genderFullGeo(Async)");
        }
        

        com.squareup.okhttp.Call call = genderFullGeoCall(fullName, countryIso2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of a full name, given a local context (ISO2 country code).
     * 
     * @param fullName  (required)
     * @param countryIso2  (required)
     * @return FirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameGenderedOut genderFullGeo(String fullName, String countryIso2) throws ApiException {
        ApiResponse<FirstLastNameGenderedOut> resp = genderFullGeoWithHttpInfo(fullName, countryIso2);
        return resp.getData();
    }

    /**
     * Infer the likely gender of a full name, given a local context (ISO2 country code).
     * 
     * @param fullName  (required)
     * @param countryIso2  (required)
     * @return ApiResponse&lt;FirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameGenderedOut> genderFullGeoWithHttpInfo(String fullName, String countryIso2) throws ApiException {
        com.squareup.okhttp.Call call = genderFullGeoValidateBeforeCall(fullName, countryIso2, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of a full name, given a local context (ISO2 country code). (asynchronously)
     * 
     * @param fullName  (required)
     * @param countryIso2  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderFullGeoAsync(String fullName, String countryIso2, final ApiCallback<FirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderFullGeoValidateBeforeCall(fullName, countryIso2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderFullGeoBatch
     * @param batchPersonalNameGeoIn A list of personal names, with a country ISO2 code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderFullGeoBatchCall(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderFullGeoBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderFullGeoBatchValidateBeforeCall(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = genderFullGeoBatchCall(batchPersonalNameGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 1000 full names, with a given cultural context (country ISO2 code).
     * 
     * @param batchPersonalNameGeoIn A list of personal names, with a country ISO2 code (optional)
     * @return BatchPersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameGenderedOut genderFullGeoBatch(BatchPersonalNameGeoIn batchPersonalNameGeoIn) throws ApiException {
        ApiResponse<BatchPersonalNameGenderedOut> resp = genderFullGeoBatchWithHttpInfo(batchPersonalNameGeoIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 1000 full names, with a given cultural context (country ISO2 code).
     * 
     * @param batchPersonalNameGeoIn A list of personal names, with a country ISO2 code (optional)
     * @return ApiResponse&lt;BatchPersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameGenderedOut> genderFullGeoBatchWithHttpInfo(BatchPersonalNameGeoIn batchPersonalNameGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = genderFullGeoBatchValidateBeforeCall(batchPersonalNameGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 1000 full names, with a given cultural context (country ISO2 code). (asynchronously)
     * 
     * @param batchPersonalNameGeoIn A list of personal names, with a country ISO2 code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderFullGeoBatchAsync(BatchPersonalNameGeoIn batchPersonalNameGeoIn, final ApiCallback<BatchPersonalNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderFullGeoBatchValidateBeforeCall(batchPersonalNameGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderGeo
     * @param firstName  (required)
     * @param lastName  (required)
     * @param countryIso2  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderGeoCall(String firstName, String lastName, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()))
            .replaceAll("\\{" + "countryIso2" + "\\}", apiClient.escapeString(countryIso2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderGeoValidateBeforeCall(String firstName, String lastName, String countryIso2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling genderGeo(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling genderGeo(Async)");
        }
        
        // verify the required parameter 'countryIso2' is set
        if (countryIso2 == null) {
            throw new ApiException("Missing the required parameter 'countryIso2' when calling genderGeo(Async)");
        }
        

        com.squareup.okhttp.Call call = genderGeoCall(firstName, lastName, countryIso2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of a name, given a local context (ISO2 country code).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param countryIso2  (required)
     * @return FirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameGenderedOut genderGeo(String firstName, String lastName, String countryIso2) throws ApiException {
        ApiResponse<FirstLastNameGenderedOut> resp = genderGeoWithHttpInfo(firstName, lastName, countryIso2);
        return resp.getData();
    }

    /**
     * Infer the likely gender of a name, given a local context (ISO2 country code).
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param countryIso2  (required)
     * @return ApiResponse&lt;FirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameGenderedOut> genderGeoWithHttpInfo(String firstName, String lastName, String countryIso2) throws ApiException {
        com.squareup.okhttp.Call call = genderGeoValidateBeforeCall(firstName, lastName, countryIso2, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of a name, given a local context (ISO2 country code). (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param countryIso2  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderGeoAsync(String firstName, String lastName, String countryIso2, final ApiCallback<FirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderGeoValidateBeforeCall(firstName, lastName, countryIso2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderGeoBatch
     * @param batchFirstLastNameGeoIn A list of names, with country code. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderGeoBatchCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderGeoBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderGeoBatchValidateBeforeCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = genderGeoBatchCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 1000 names, each given a local context (ISO2 country code).
     * 
     * @param batchFirstLastNameGeoIn A list of names, with country code. (optional)
     * @return BatchFirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameGenderedOut genderGeoBatch(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGenderedOut> resp = genderGeoBatchWithHttpInfo(batchFirstLastNameGeoIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 1000 names, each given a local context (ISO2 country code).
     * 
     * @param batchFirstLastNameGeoIn A list of names, with country code. (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameGenderedOut> genderGeoBatchWithHttpInfo(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = genderGeoBatchValidateBeforeCall(batchFirstLastNameGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 1000 names, each given a local context (ISO2 country code). (asynchronously)
     * 
     * @param batchFirstLastNameGeoIn A list of names, with country code. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderGeoBatchAsync(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ApiCallback<BatchFirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderGeoBatchValidateBeforeCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for origin
     * @param firstName  (required)
     * @param lastName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call originCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/origin/{firstName}/{lastName}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call originValidateBeforeCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling origin(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling origin(Async)");
        }
        

        com.squareup.okhttp.Call call = originCall(firstName, lastName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameOriginedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameOriginedOut origin(String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameOriginedOut> resp = originWithHttpInfo(firstName, lastName);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameOriginedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameOriginedOut> originWithHttpInfo(String firstName, String lastName) throws ApiException {
        com.squareup.okhttp.Call call = originValidateBeforeCall(firstName, lastName, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameOriginedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call originAsync(String firstName, String lastName, final ApiCallback<FirstLastNameOriginedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = originValidateBeforeCall(firstName, lastName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameOriginedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for originBatch
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call originBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/originBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call originBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = originBatchCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer the likely country of origin of up to 1000 names, detecting automatically the cultural context.
     * 
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @return BatchFirstLastNameOriginedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameOriginedOut originBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchFirstLastNameOriginedOut> resp = originBatchWithHttpInfo(batchFirstLastNameIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer the likely country of origin of up to 1000 names, detecting automatically the cultural context.
     * 
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameOriginedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameOriginedOut> originBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        com.squareup.okhttp.Call call = originBatchValidateBeforeCall(batchFirstLastNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameOriginedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer the likely country of origin of up to 1000 names, detecting automatically the cultural context. (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call originBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchFirstLastNameOriginedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = originBatchValidateBeforeCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameOriginedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for parsedGenderBatch
     * @param batchParsedFullNameIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call parsedGenderBatchCall(BatchParsedFullNameIn batchParsedFullNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchParsedFullNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/parsedGenderBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call parsedGenderBatchValidateBeforeCall(BatchParsedFullNameIn batchParsedFullNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = parsedGenderBatchCall(batchParsedFullNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
     * 
     * @param batchParsedFullNameIn A list of personal names (optional)
     * @return BatchFirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameGenderedOut parsedGenderBatch(BatchParsedFullNameIn batchParsedFullNameIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGenderedOut> resp = parsedGenderBatchWithHttpInfo(batchParsedFullNameIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
     * 
     * @param batchParsedFullNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameGenderedOut> parsedGenderBatchWithHttpInfo(BatchParsedFullNameIn batchParsedFullNameIn) throws ApiException {
        com.squareup.okhttp.Call call = parsedGenderBatchValidateBeforeCall(batchParsedFullNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context. (asynchronously)
     * 
     * @param batchParsedFullNameIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call parsedGenderBatchAsync(BatchParsedFullNameIn batchParsedFullNameIn, final ApiCallback<BatchFirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = parsedGenderBatchValidateBeforeCall(batchParsedFullNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for parsedGenderGeoBatch
     * @param batchParsedFullNameGeoIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call parsedGenderGeoBatchCall(BatchParsedFullNameGeoIn batchParsedFullNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchParsedFullNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/parsedGenderGeoBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call parsedGenderGeoBatchValidateBeforeCall(BatchParsedFullNameGeoIn batchParsedFullNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = parsedGenderGeoBatchCall(batchParsedFullNameGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
     * 
     * @param batchParsedFullNameGeoIn A list of personal names (optional)
     * @return BatchFirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameGenderedOut parsedGenderGeoBatch(BatchParsedFullNameGeoIn batchParsedFullNameGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGenderedOut> resp = parsedGenderGeoBatchWithHttpInfo(batchParsedFullNameGeoIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context.
     * 
     * @param batchParsedFullNameGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameGenderedOut> parsedGenderGeoBatchWithHttpInfo(BatchParsedFullNameGeoIn batchParsedFullNameGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = parsedGenderGeoBatchValidateBeforeCall(batchParsedFullNameGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 1000 fully parsed names, detecting automatically the cultural context. (asynchronously)
     * 
     * @param batchParsedFullNameGeoIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call parsedGenderGeoBatchAsync(BatchParsedFullNameGeoIn batchParsedFullNameGeoIn, final ApiCallback<BatchFirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = parsedGenderGeoBatchValidateBeforeCall(batchParsedFullNameGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usRaceEthnicity
     * @param firstName  (required)
     * @param lastName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usRaceEthnicityCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/usRaceEthnicity/{firstName}/{lastName}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usRaceEthnicityValidateBeforeCall(String firstName, String lastName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling usRaceEthnicity(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling usRaceEthnicity(Async)");
        }
        

        com.squareup.okhttp.Call call = usRaceEthnicityCall(firstName, lastName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return FirstLastNameUSRaceEthnicityOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameUSRaceEthnicityOut usRaceEthnicity(String firstName, String lastName) throws ApiException {
        ApiResponse<FirstLastNameUSRaceEthnicityOut> resp = usRaceEthnicityWithHttpInfo(firstName, lastName);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @return ApiResponse&lt;FirstLastNameUSRaceEthnicityOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameUSRaceEthnicityOut> usRaceEthnicityWithHttpInfo(String firstName, String lastName) throws ApiException {
        com.squareup.okhttp.Call call = usRaceEthnicityValidateBeforeCall(firstName, lastName, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameUSRaceEthnicityOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usRaceEthnicityAsync(String firstName, String lastName, final ApiCallback<FirstLastNameUSRaceEthnicityOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usRaceEthnicityValidateBeforeCall(firstName, lastName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameUSRaceEthnicityOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usRaceEthnicityBatch
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usRaceEthnicityBatchCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameGeoIn;

        // create path and map variables
        String localVarPath = "/api2/json/usRaceEthnicityBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usRaceEthnicityBatchValidateBeforeCall(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = usRaceEthnicityBatchCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return BatchFirstLastNameUSRaceEthnicityOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameUSRaceEthnicityOut usRaceEthnicityBatch(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> resp = usRaceEthnicityBatchWithHttpInfo(batchFirstLastNameGeoIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameUSRaceEthnicityOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> usRaceEthnicityBatchWithHttpInfo(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn) throws ApiException {
        com.squareup.okhttp.Call call = usRaceEthnicityBatchValidateBeforeCall(batchFirstLastNameGeoIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameUSRaceEthnicityOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy. (asynchronously)
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usRaceEthnicityBatchAsync(BatchFirstLastNameGeoIn batchFirstLastNameGeoIn, final ApiCallback<BatchFirstLastNameUSRaceEthnicityOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usRaceEthnicityBatchValidateBeforeCall(batchFirstLastNameGeoIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameUSRaceEthnicityOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usRaceEthnicityZIP5
     * @param firstName  (required)
     * @param lastName  (required)
     * @param zip5Code  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usRaceEthnicityZIP5Call(String firstName, String lastName, String zip5Code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}"
            .replaceAll("\\{" + "firstName" + "\\}", apiClient.escapeString(firstName.toString()))
            .replaceAll("\\{" + "lastName" + "\\}", apiClient.escapeString(lastName.toString()))
            .replaceAll("\\{" + "zip5Code" + "\\}", apiClient.escapeString(zip5Code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usRaceEthnicityZIP5ValidateBeforeCall(String firstName, String lastName, String zip5Code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling usRaceEthnicityZIP5(Async)");
        }
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling usRaceEthnicityZIP5(Async)");
        }
        
        // verify the required parameter 'zip5Code' is set
        if (zip5Code == null) {
            throw new ApiException("Missing the required parameter 'zip5Code' when calling usRaceEthnicityZIP5(Async)");
        }
        

        com.squareup.okhttp.Call call = usRaceEthnicityZIP5Call(firstName, lastName, zip5Code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param zip5Code  (required)
     * @return FirstLastNameUSRaceEthnicityOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameUSRaceEthnicityOut usRaceEthnicityZIP5(String firstName, String lastName, String zip5Code) throws ApiException {
        ApiResponse<FirstLastNameUSRaceEthnicityOut> resp = usRaceEthnicityZIP5WithHttpInfo(firstName, lastName, zip5Code);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info.
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param zip5Code  (required)
     * @return ApiResponse&lt;FirstLastNameUSRaceEthnicityOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameUSRaceEthnicityOut> usRaceEthnicityZIP5WithHttpInfo(String firstName, String lastName, String zip5Code) throws ApiException {
        com.squareup.okhttp.Call call = usRaceEthnicityZIP5ValidateBeforeCall(firstName, lastName, zip5Code, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameUSRaceEthnicityOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. (asynchronously)
     * 
     * @param firstName  (required)
     * @param lastName  (required)
     * @param zip5Code  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usRaceEthnicityZIP5Async(String firstName, String lastName, String zip5Code, final ApiCallback<FirstLastNameUSRaceEthnicityOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usRaceEthnicityZIP5ValidateBeforeCall(firstName, lastName, zip5Code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameUSRaceEthnicityOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usZipRaceEthnicityBatch
     * @param batchFirstLastNameGeoZippedIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usZipRaceEthnicityBatchCall(BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameGeoZippedIn;

        // create path and map variables
        String localVarPath = "/api2/json/usZipRaceEthnicityBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usZipRaceEthnicityBatchValidateBeforeCall(BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = usZipRaceEthnicityBatchCall(batchFirstLastNameGeoZippedIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
     * 
     * @param batchFirstLastNameGeoZippedIn A list of personal names (optional)
     * @return BatchFirstLastNameUSRaceEthnicityOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameUSRaceEthnicityOut usZipRaceEthnicityBatch(BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn) throws ApiException {
        ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> resp = usZipRaceEthnicityBatchWithHttpInfo(batchFirstLastNameGeoZippedIn);
        return resp.getData();
    }

    /**
     * [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.
     * 
     * @param batchFirstLastNameGeoZippedIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchFirstLastNameUSRaceEthnicityOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> usZipRaceEthnicityBatchWithHttpInfo(BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn) throws ApiException {
        com.squareup.okhttp.Call call = usZipRaceEthnicityBatchValidateBeforeCall(batchFirstLastNameGeoZippedIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameUSRaceEthnicityOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [USES 10 UNITS] Infer up-to 1000 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. (asynchronously)
     * 
     * @param batchFirstLastNameGeoZippedIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usZipRaceEthnicityBatchAsync(BatchFirstLastNameGeoZippedIn batchFirstLastNameGeoZippedIn, final ApiCallback<BatchFirstLastNameUSRaceEthnicityOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usZipRaceEthnicityBatchValidateBeforeCall(batchFirstLastNameGeoZippedIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameUSRaceEthnicityOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
