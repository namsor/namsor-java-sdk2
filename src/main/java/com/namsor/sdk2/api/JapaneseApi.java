/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNameGenderIn;
import com.namsor.sdk2.model.BatchFirstLastNameGenderedOut;
import com.namsor.sdk2.model.BatchFirstLastNameIn;
import com.namsor.sdk2.model.BatchMatchPersonalFirstLastNameIn;
import com.namsor.sdk2.model.BatchNameMatchCandidatesOut;
import com.namsor.sdk2.model.BatchNameMatchedOut;
import com.namsor.sdk2.model.BatchPersonalNameGenderedOut;
import com.namsor.sdk2.model.BatchPersonalNameIn;
import com.namsor.sdk2.model.BatchPersonalNameParsedOut;
import com.namsor.sdk2.model.FeedbackLoopOut;
import com.namsor.sdk2.model.FirstLastNameGenderedOut;
import com.namsor.sdk2.model.NameMatchCandidatesOut;
import com.namsor.sdk2.model.NameMatchedOut;
import com.namsor.sdk2.model.PersonalNameGenderedOut;
import com.namsor.sdk2.model.PersonalNameParsedOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JapaneseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JapaneseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JapaneseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for genderJapaneseNameFull
     * @param japaneseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNameFullCall(String japaneseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseNameFull/{japaneseName}"
            .replace("{" + "japaneseName" + "}", localVarApiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderJapaneseNameFullValidateBeforeCall(String japaneseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling genderJapaneseNameFull(Async)");
        }

        return genderJapaneseNameFullCall(japaneseName, _callback);

    }

    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明
     * 
     * @param japaneseName  (required)
     * @return PersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameGenderedOut genderJapaneseNameFull(String japaneseName) throws ApiException {
        ApiResponse<PersonalNameGenderedOut> localVarResp = genderJapaneseNameFullWithHttpInfo(japaneseName);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明
     * 
     * @param japaneseName  (required)
     * @return ApiResponse&lt;PersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameGenderedOut> genderJapaneseNameFullWithHttpInfo(String japaneseName) throws ApiException {
        okhttp3.Call localVarCall = genderJapaneseNameFullValidateBeforeCall(japaneseName, null);
        Type localVarReturnType = new TypeToken<PersonalNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明 (asynchronously)
     * 
     * @param japaneseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNameFullAsync(String japaneseName, final ApiCallback<PersonalNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderJapaneseNameFullValidateBeforeCall(japaneseName, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genderJapaneseNameFullBatch
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNameFullBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseNameFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderJapaneseNameFullBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        return genderJapaneseNameFullBatchCall(batchPersonalNameIn, _callback);

    }

    /**
     * Infer the likely gender of up to 100 full names
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return BatchPersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameGenderedOut genderJapaneseNameFullBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameGenderedOut> localVarResp = genderJapaneseNameFullBatchWithHttpInfo(batchPersonalNameIn);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of up to 100 full names
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameGenderedOut> genderJapaneseNameFullBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        okhttp3.Call localVarCall = genderJapaneseNameFullBatchValidateBeforeCall(batchPersonalNameIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 100 full names (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNameFullBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderJapaneseNameFullBatchValidateBeforeCall(batchPersonalNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genderJapaneseNamePinyin
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNamePinyinCall(String japaneseSurname, String japaneseGivenName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}"
            .replace("{" + "japaneseSurname" + "}", localVarApiClient.escapeString(japaneseSurname.toString()))
            .replace("{" + "japaneseGivenName" + "}", localVarApiClient.escapeString(japaneseGivenName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderJapaneseNamePinyinValidateBeforeCall(String japaneseSurname, String japaneseGivenName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseSurname' is set
        if (japaneseSurname == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurname' when calling genderJapaneseNamePinyin(Async)");
        }

        // verify the required parameter 'japaneseGivenName' is set
        if (japaneseGivenName == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenName' when calling genderJapaneseNamePinyin(Async)");
        }

        return genderJapaneseNamePinyinCall(japaneseSurname, japaneseGivenName, _callback);

    }

    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin).
     * 
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @return FirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FirstLastNameGenderedOut genderJapaneseNamePinyin(String japaneseSurname, String japaneseGivenName) throws ApiException {
        ApiResponse<FirstLastNameGenderedOut> localVarResp = genderJapaneseNamePinyinWithHttpInfo(japaneseSurname, japaneseGivenName);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin).
     * 
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @return ApiResponse&lt;FirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FirstLastNameGenderedOut> genderJapaneseNamePinyinWithHttpInfo(String japaneseSurname, String japaneseGivenName) throws ApiException {
        okhttp3.Call localVarCall = genderJapaneseNamePinyinValidateBeforeCall(japaneseSurname, japaneseGivenName, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin). (asynchronously)
     * 
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A genderized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNamePinyinAsync(String japaneseSurname, String japaneseGivenName, final ApiCallback<FirstLastNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderJapaneseNamePinyinValidateBeforeCall(japaneseSurname, japaneseGivenName, _callback);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genderJapaneseNamePinyinBatch
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNamePinyinBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseNameBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderJapaneseNamePinyinBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        return genderJapaneseNamePinyinBatchCall(batchFirstLastNameIn, _callback);

    }

    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @return BatchFirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchFirstLastNameGenderedOut genderJapaneseNamePinyinBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGenderedOut> localVarResp = genderJapaneseNamePinyinBatchWithHttpInfo(batchFirstLastNameIn);
        return localVarResp.getData();
    }

    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchFirstLastNameGenderedOut> genderJapaneseNamePinyinBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        okhttp3.Call localVarCall = genderJapaneseNamePinyinBatchValidateBeforeCall(batchFirstLastNameIn, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderJapaneseNamePinyinBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchFirstLastNameGenderedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderJapaneseNamePinyinBatchValidateBeforeCall(batchFirstLastNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameGenderKanjiCandidatesBatch
     * @param batchFirstLastNameGenderIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameGenderKanjiCandidatesBatchCall(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameGenderIn;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameGenderKanjiCandidatesBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameGenderKanjiCandidatesBatchValidateBeforeCall(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn, final ApiCallback _callback) throws ApiException {
        return japaneseNameGenderKanjiCandidatesBatchCall(batchFirstLastNameGenderIn, _callback);

    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameGenderIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchNameMatchCandidatesOut japaneseNameGenderKanjiCandidatesBatch(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> localVarResp = japaneseNameGenderKanjiCandidatesBatchWithHttpInfo(batchFirstLastNameGenderIn);
        return localVarResp.getData();
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameGenderIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchNameMatchCandidatesOut> japaneseNameGenderKanjiCandidatesBatchWithHttpInfo(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameGenderKanjiCandidatesBatchValidateBeforeCall(batchFirstLastNameGenderIn, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae (asynchronously)
     * 
     * @param batchFirstLastNameGenderIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameGenderKanjiCandidatesBatchAsync(BatchFirstLastNameGenderIn batchFirstLastNameGenderIn, final ApiCallback<BatchNameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameGenderKanjiCandidatesBatchValidateBeforeCall(batchFirstLastNameGenderIn, _callback);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameKanjiCandidates
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameKanjiCandidatesCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}"
            .replace("{" + "japaneseSurnameLatin" + "}", localVarApiClient.escapeString(japaneseSurnameLatin.toString()))
            .replace("{" + "japaneseGivenNameLatin" + "}", localVarApiClient.escapeString(japaneseGivenNameLatin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameKanjiCandidatesValidateBeforeCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseSurnameLatin' is set
        if (japaneseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameKanjiCandidates(Async)");
        }

        // verify the required parameter 'japaneseGivenNameLatin' is set
        if (japaneseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameKanjiCandidates(Async)");
        }

        return japaneseNameKanjiCandidatesCall(japaneseSurnameLatin, japaneseGivenNameLatin, _callback);

    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @return NameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public NameMatchCandidatesOut japaneseNameKanjiCandidates(String japaneseSurnameLatin, String japaneseGivenNameLatin) throws ApiException {
        ApiResponse<NameMatchCandidatesOut> localVarResp = japaneseNameKanjiCandidatesWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin);
        return localVarResp.getData();
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @return ApiResponse&lt;NameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameMatchCandidatesOut> japaneseNameKanjiCandidatesWithHttpInfo(String japaneseSurnameLatin, String japaneseGivenNameLatin) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameKanjiCandidatesValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, null);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameKanjiCandidatesAsync(String japaneseSurnameLatin, String japaneseGivenNameLatin, final ApiCallback<NameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameKanjiCandidatesValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, _callback);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameKanjiCandidates1
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameKanjiCandidates1Call(String japaneseSurnameLatin, String japaneseGivenNameLatin, String knownGender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}"
            .replace("{" + "japaneseSurnameLatin" + "}", localVarApiClient.escapeString(japaneseSurnameLatin.toString()))
            .replace("{" + "japaneseGivenNameLatin" + "}", localVarApiClient.escapeString(japaneseGivenNameLatin.toString()))
            .replace("{" + "knownGender" + "}", localVarApiClient.escapeString(knownGender.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameKanjiCandidates1ValidateBeforeCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String knownGender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseSurnameLatin' is set
        if (japaneseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameKanjiCandidates1(Async)");
        }

        // verify the required parameter 'japaneseGivenNameLatin' is set
        if (japaneseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameKanjiCandidates1(Async)");
        }

        // verify the required parameter 'knownGender' is set
        if (knownGender == null) {
            throw new ApiException("Missing the required parameter 'knownGender' when calling japaneseNameKanjiCandidates1(Async)");
        }

        return japaneseNameKanjiCandidates1Call(japaneseSurnameLatin, japaneseGivenNameLatin, knownGender, _callback);

    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @return NameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public NameMatchCandidatesOut japaneseNameKanjiCandidates1(String japaneseSurnameLatin, String japaneseGivenNameLatin, String knownGender) throws ApiException {
        ApiResponse<NameMatchCandidatesOut> localVarResp = japaneseNameKanjiCandidates1WithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, knownGender);
        return localVarResp.getData();
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @return ApiResponse&lt;NameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameMatchCandidatesOut> japaneseNameKanjiCandidates1WithHttpInfo(String japaneseSurnameLatin, String japaneseGivenNameLatin, String knownGender) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameKanjiCandidates1ValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, knownGender, null);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. (asynchronously)
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param knownGender  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameKanjiCandidates1Async(String japaneseSurnameLatin, String japaneseGivenNameLatin, String knownGender, final ApiCallback<NameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameKanjiCandidates1ValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, knownGender, _callback);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameKanjiCandidatesBatch
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameKanjiCandidatesBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameKanjiCandidatesBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameKanjiCandidatesBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        return japaneseNameKanjiCandidatesBatchCall(batchFirstLastNameIn, _callback);

    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchNameMatchCandidatesOut japaneseNameKanjiCandidatesBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> localVarResp = japaneseNameKanjiCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
        return localVarResp.getData();
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchNameMatchCandidatesOut> japaneseNameKanjiCandidatesBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameKanjiCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameKanjiCandidatesBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchNameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameKanjiCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameLatinCandidates
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameLatinCandidatesCall(String japaneseSurnameKanji, String japaneseGivenNameKanji, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}"
            .replace("{" + "japaneseSurnameKanji" + "}", localVarApiClient.escapeString(japaneseSurnameKanji.toString()))
            .replace("{" + "japaneseGivenNameKanji" + "}", localVarApiClient.escapeString(japaneseGivenNameKanji.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameLatinCandidatesValidateBeforeCall(String japaneseSurnameKanji, String japaneseGivenNameKanji, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseSurnameKanji' is set
        if (japaneseSurnameKanji == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameKanji' when calling japaneseNameLatinCandidates(Async)");
        }

        // verify the required parameter 'japaneseGivenNameKanji' is set
        if (japaneseGivenNameKanji == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameKanji' when calling japaneseNameLatinCandidates(Async)");
        }

        return japaneseNameLatinCandidatesCall(japaneseSurnameKanji, japaneseGivenNameKanji, _callback);

    }

    /**
     * Romanize japanese name, based on the name in Kanji.
     * 
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @return NameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public NameMatchCandidatesOut japaneseNameLatinCandidates(String japaneseSurnameKanji, String japaneseGivenNameKanji) throws ApiException {
        ApiResponse<NameMatchCandidatesOut> localVarResp = japaneseNameLatinCandidatesWithHttpInfo(japaneseSurnameKanji, japaneseGivenNameKanji);
        return localVarResp.getData();
    }

    /**
     * Romanize japanese name, based on the name in Kanji.
     * 
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @return ApiResponse&lt;NameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameMatchCandidatesOut> japaneseNameLatinCandidatesWithHttpInfo(String japaneseSurnameKanji, String japaneseGivenNameKanji) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameLatinCandidatesValidateBeforeCall(japaneseSurnameKanji, japaneseGivenNameKanji, null);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Romanize japanese name, based on the name in Kanji. (asynchronously)
     * 
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameLatinCandidatesAsync(String japaneseSurnameKanji, String japaneseGivenNameKanji, final ApiCallback<NameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameLatinCandidatesValidateBeforeCall(japaneseSurnameKanji, japaneseGivenNameKanji, _callback);
        Type localVarReturnType = new TypeToken<NameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameLatinCandidatesBatch
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameLatinCandidatesBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameLatinCandidatesBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameLatinCandidatesBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        return japaneseNameLatinCandidatesBatchCall(batchFirstLastNameIn, _callback);

    }

    /**
     * Romanize japanese names, based on the name in KANJI
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchNameMatchCandidatesOut japaneseNameLatinCandidatesBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> localVarResp = japaneseNameLatinCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
        return localVarResp.getData();
    }

    /**
     * Romanize japanese names, based on the name in KANJI
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchNameMatchCandidatesOut> japaneseNameLatinCandidatesBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameLatinCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Romanize japanese names, based on the name in KANJI (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of genderized names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameLatinCandidatesBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchNameMatchCandidatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameLatinCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameMatch
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameMatchCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}"
            .replace("{" + "japaneseSurnameLatin" + "}", localVarApiClient.escapeString(japaneseSurnameLatin.toString()))
            .replace("{" + "japaneseGivenNameLatin" + "}", localVarApiClient.escapeString(japaneseGivenNameLatin.toString()))
            .replace("{" + "japaneseName" + "}", localVarApiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameMatchValidateBeforeCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseSurnameLatin' is set
        if (japaneseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameMatch(Async)");
        }

        // verify the required parameter 'japaneseGivenNameLatin' is set
        if (japaneseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameMatch(Async)");
        }

        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling japaneseNameMatch(Async)");
        }

        return japaneseNameMatchCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, _callback);

    }

    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return NameMatchedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public NameMatchedOut japaneseNameMatch(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        ApiResponse<NameMatchedOut> localVarResp = japaneseNameMatchWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
        return localVarResp.getData();
    }

    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return ApiResponse&lt;NameMatchedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameMatchedOut> japaneseNameMatchWithHttpInfo(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameMatchValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, null);
        Type localVarReturnType = new TypeToken<NameMatchedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameMatchAsync(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback<NameMatchedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameMatchValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, _callback);
        Type localVarReturnType = new TypeToken<NameMatchedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameMatchBatch
     * @param batchMatchPersonalFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matched names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameMatchBatchCall(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchMatchPersonalFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameMatchBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameMatchBatchValidateBeforeCall(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn, final ApiCallback _callback) throws ApiException {
        return japaneseNameMatchBatchCall(batchMatchPersonalFirstLastNameIn, _callback);

    }

    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
     * 
     * @param batchMatchPersonalFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return BatchNameMatchedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matched names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchNameMatchedOut japaneseNameMatchBatch(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchedOut> localVarResp = japaneseNameMatchBatchWithHttpInfo(batchMatchPersonalFirstLastNameIn);
        return localVarResp.getData();
    }

    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
     * 
     * @param batchMatchPersonalFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matched names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchNameMatchedOut> japaneseNameMatchBatchWithHttpInfo(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameMatchBatchValidateBeforeCall(batchMatchPersonalFirstLastNameIn, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae (asynchronously)
     * 
     * @param batchMatchPersonalFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matched names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn batchMatchPersonalFirstLastNameIn, final ApiCallback<BatchNameMatchedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameMatchBatchValidateBeforeCall(batchMatchPersonalFirstLastNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchNameMatchedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for japaneseNameMatchFeedbackLoop
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameMatchFeedbackLoopCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}"
            .replace("{" + "japaneseSurnameLatin" + "}", localVarApiClient.escapeString(japaneseSurnameLatin.toString()))
            .replace("{" + "japaneseGivenNameLatin" + "}", localVarApiClient.escapeString(japaneseGivenNameLatin.toString()))
            .replace("{" + "japaneseName" + "}", localVarApiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call japaneseNameMatchFeedbackLoopValidateBeforeCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseSurnameLatin' is set
        if (japaneseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameMatchFeedbackLoop(Async)");
        }

        // verify the required parameter 'japaneseGivenNameLatin' is set
        if (japaneseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameMatchFeedbackLoop(Async)");
        }

        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling japaneseNameMatchFeedbackLoop(Async)");
        }

        return japaneseNameMatchFeedbackLoopCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, _callback);

    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return FeedbackLoopOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public FeedbackLoopOut japaneseNameMatchFeedbackLoop(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        ApiResponse<FeedbackLoopOut> localVarResp = japaneseNameMatchFeedbackLoopWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
        return localVarResp.getData();
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return ApiResponse&lt;FeedbackLoopOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedbackLoopOut> japaneseNameMatchFeedbackLoopWithHttpInfo(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        okhttp3.Call localVarCall = japaneseNameMatchFeedbackLoopValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, null);
        Type localVarReturnType = new TypeToken<FeedbackLoopOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A romanized name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call japaneseNameMatchFeedbackLoopAsync(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback<FeedbackLoopOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = japaneseNameMatchFeedbackLoopValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, _callback);
        Type localVarReturnType = new TypeToken<FeedbackLoopOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseJapaneseName
     * @param japaneseName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseJapaneseNameCall(String japaneseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api2/json/parseJapaneseName/{japaneseName}"
            .replace("{" + "japaneseName" + "}", localVarApiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseJapaneseNameValidateBeforeCall(String japaneseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling parseJapaneseName(Async)");
        }

        return parseJapaneseNameCall(japaneseName, _callback);

    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
     * 
     * @param japaneseName  (required)
     * @return PersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public PersonalNameParsedOut parseJapaneseName(String japaneseName) throws ApiException {
        ApiResponse<PersonalNameParsedOut> localVarResp = parseJapaneseNameWithHttpInfo(japaneseName);
        return localVarResp.getData();
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
     * 
     * @param japaneseName  (required)
     * @return ApiResponse&lt;PersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalNameParsedOut> parseJapaneseNameWithHttpInfo(String japaneseName) throws ApiException {
        okhttp3.Call localVarCall = parseJapaneseNameValidateBeforeCall(japaneseName, null);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A origined name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseJapaneseNameAsync(String japaneseName, final ApiCallback<PersonalNameParsedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseJapaneseNameValidateBeforeCall(japaneseName, _callback);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseJapaneseNameBatch
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseJapaneseNameBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/parseJapaneseNameBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseJapaneseNameBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback _callback) throws ApiException {
        return parseJapaneseNameBatchCall(batchPersonalNameIn, _callback);

    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return BatchPersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public BatchPersonalNameParsedOut parseJapaneseNameBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameParsedOut> localVarResp = parseJapaneseNameBatchWithHttpInfo(batchPersonalNameIn);
        return localVarResp.getData();
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPersonalNameParsedOut> parseJapaneseNameBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        okhttp3.Call localVarCall = parseJapaneseNameBatchValidateBeforeCall(batchPersonalNameIn, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of parsed names. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing or incorrect API Key </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Email not Verified, or API Limit Reached, or API Key Disabled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (ex. too many names) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parseJapaneseNameBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameParsedOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseJapaneseNameBatchValidateBeforeCall(batchPersonalNameIn, _callback);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
