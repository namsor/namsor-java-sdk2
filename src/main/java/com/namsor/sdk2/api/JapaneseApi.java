/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.11
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiCallback;
import com.namsor.sdk2.invoke.ApiClient;
import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.invoke.ApiResponse;
import com.namsor.sdk2.invoke.Configuration;
import com.namsor.sdk2.invoke.Pair;
import com.namsor.sdk2.invoke.ProgressRequestBody;
import com.namsor.sdk2.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.sdk2.model.BatchFirstLastNameGenderedOut;
import com.namsor.sdk2.model.BatchFirstLastNameIn;
import com.namsor.sdk2.model.BatchNameMatchCandidatesOut;
import com.namsor.sdk2.model.BatchPersonalNameGenderedOut;
import com.namsor.sdk2.model.BatchPersonalNameIn;
import com.namsor.sdk2.model.BatchPersonalNameParsedOut;
import com.namsor.sdk2.model.FirstLastNameGenderedOut;
import com.namsor.sdk2.model.PersonalNameGenderedOut;
import com.namsor.sdk2.model.PersonalNameParsedOut;
import com.namsor.sdk2.model.RomanizedNameOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JapaneseApi {
    private ApiClient apiClient;

    public JapaneseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JapaneseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for genderJapaneseNameFull
     * @param japaneseName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNameFullCall(String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseNameFull/{japaneseName}"
            .replaceAll("\\{" + "japaneseName" + "\\}", apiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderJapaneseNameFullValidateBeforeCall(String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling genderJapaneseNameFull(Async)");
        }
        

        com.squareup.okhttp.Call call = genderJapaneseNameFullCall(japaneseName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明
     * 
     * @param japaneseName  (required)
     * @return PersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalNameGenderedOut genderJapaneseNameFull(String japaneseName) throws ApiException {
        ApiResponse<PersonalNameGenderedOut> resp = genderJapaneseNameFullWithHttpInfo(japaneseName);
        return resp.getData();
    }

    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明
     * 
     * @param japaneseName  (required)
     * @return ApiResponse&lt;PersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalNameGenderedOut> genderJapaneseNameFullWithHttpInfo(String japaneseName) throws ApiException {
        com.squareup.okhttp.Call call = genderJapaneseNameFullValidateBeforeCall(japaneseName, null, null);
        Type localVarReturnType = new TypeToken<PersonalNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of a Japanese full name ex. 王晓明 (asynchronously)
     * 
     * @param japaneseName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNameFullAsync(String japaneseName, final ApiCallback<PersonalNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderJapaneseNameFullValidateBeforeCall(japaneseName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderJapaneseNameFullBatch
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNameFullBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseNameFullBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderJapaneseNameFullBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = genderJapaneseNameFullBatchCall(batchPersonalNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 100 full names
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return BatchPersonalNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameGenderedOut genderJapaneseNameFullBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameGenderedOut> resp = genderJapaneseNameFullBatchWithHttpInfo(batchPersonalNameIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 100 full names
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameGenderedOut> genderJapaneseNameFullBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        com.squareup.okhttp.Call call = genderJapaneseNameFullBatchValidateBeforeCall(batchPersonalNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 100 full names (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNameFullBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderJapaneseNameFullBatchValidateBeforeCall(batchPersonalNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderJapaneseNamePinyin
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNamePinyinCall(String japaneseSurname, String japaneseGivenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}"
            .replaceAll("\\{" + "japaneseSurname" + "\\}", apiClient.escapeString(japaneseSurname.toString()))
            .replaceAll("\\{" + "japaneseGivenName" + "\\}", apiClient.escapeString(japaneseGivenName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderJapaneseNamePinyinValidateBeforeCall(String japaneseSurname, String japaneseGivenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'japaneseSurname' is set
        if (japaneseSurname == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurname' when calling genderJapaneseNamePinyin(Async)");
        }
        
        // verify the required parameter 'japaneseGivenName' is set
        if (japaneseGivenName == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenName' when calling genderJapaneseNamePinyin(Async)");
        }
        

        com.squareup.okhttp.Call call = genderJapaneseNamePinyinCall(japaneseSurname, japaneseGivenName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin).
     * 
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @return FirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirstLastNameGenderedOut genderJapaneseNamePinyin(String japaneseSurname, String japaneseGivenName) throws ApiException {
        ApiResponse<FirstLastNameGenderedOut> resp = genderJapaneseNamePinyinWithHttpInfo(japaneseSurname, japaneseGivenName);
        return resp.getData();
    }

    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin).
     * 
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @return ApiResponse&lt;FirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirstLastNameGenderedOut> genderJapaneseNamePinyinWithHttpInfo(String japaneseSurname, String japaneseGivenName) throws ApiException {
        com.squareup.okhttp.Call call = genderJapaneseNamePinyinValidateBeforeCall(japaneseSurname, japaneseGivenName, null, null);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of a Japanese name in LATIN (Pinyin). (asynchronously)
     * 
     * @param japaneseSurname  (required)
     * @param japaneseGivenName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNamePinyinAsync(String japaneseSurname, String japaneseGivenName, final ApiCallback<FirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderJapaneseNamePinyinValidateBeforeCall(japaneseSurname, japaneseGivenName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genderJapaneseNamePinyinBatch
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNamePinyinBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/genderJapaneseNameBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genderJapaneseNamePinyinBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = genderJapaneseNamePinyinBatchCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @return BatchFirstLastNameGenderedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchFirstLastNameGenderedOut genderJapaneseNamePinyinBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchFirstLastNameGenderedOut> resp = genderJapaneseNamePinyinBatchWithHttpInfo(batchFirstLastNameIn);
        return resp.getData();
    }

    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @return ApiResponse&lt;BatchFirstLastNameGenderedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchFirstLastNameGenderedOut> genderJapaneseNamePinyinBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        com.squareup.okhttp.Call call = genderJapaneseNamePinyinBatchValidateBeforeCall(batchFirstLastNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of names, with country code. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genderJapaneseNamePinyinBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchFirstLastNameGenderedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genderJapaneseNamePinyinBatchValidateBeforeCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchFirstLastNameGenderedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for japaneseNameKanjiCandidates
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call japaneseNameKanjiCandidatesCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}"
            .replaceAll("\\{" + "japaneseSurnameLatin" + "\\}", apiClient.escapeString(japaneseSurnameLatin.toString()))
            .replaceAll("\\{" + "japaneseGivenNameLatin" + "\\}", apiClient.escapeString(japaneseGivenNameLatin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call japaneseNameKanjiCandidatesValidateBeforeCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'japaneseSurnameLatin' is set
        if (japaneseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameKanjiCandidates(Async)");
        }
        
        // verify the required parameter 'japaneseGivenNameLatin' is set
        if (japaneseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameKanjiCandidates(Async)");
        }
        

        com.squareup.okhttp.Call call = japaneseNameKanjiCandidatesCall(japaneseSurnameLatin, japaneseGivenNameLatin, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @return RomanizedNameOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RomanizedNameOut japaneseNameKanjiCandidates(String japaneseSurnameLatin, String japaneseGivenNameLatin) throws ApiException {
        ApiResponse<RomanizedNameOut> resp = japaneseNameKanjiCandidatesWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin);
        return resp.getData();
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @return ApiResponse&lt;RomanizedNameOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RomanizedNameOut> japaneseNameKanjiCandidatesWithHttpInfo(String japaneseSurnameLatin, String japaneseGivenNameLatin) throws ApiException {
        com.squareup.okhttp.Call call = japaneseNameKanjiCandidatesValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, null, null);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call japaneseNameKanjiCandidatesAsync(String japaneseSurnameLatin, String japaneseGivenNameLatin, final ApiCallback<RomanizedNameOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = japaneseNameKanjiCandidatesValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for japaneseNameKanjiCandidatesBatch
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call japaneseNameKanjiCandidatesBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameKanjiCandidatesBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call japaneseNameKanjiCandidatesBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = japaneseNameKanjiCandidatesBatchCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchNameMatchCandidatesOut japaneseNameKanjiCandidatesBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> resp = japaneseNameKanjiCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
        return resp.getData();
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchNameMatchCandidatesOut> japaneseNameKanjiCandidatesBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        com.squareup.okhttp.Call call = japaneseNameKanjiCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call japaneseNameKanjiCandidatesBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchNameMatchCandidatesOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = japaneseNameKanjiCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for japaneseNameLatinCandidates
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call japaneseNameLatinCandidatesCall(String japaneseSurnameKanji, String japaneseGivenNameKanji, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}"
            .replaceAll("\\{" + "japaneseSurnameKanji" + "\\}", apiClient.escapeString(japaneseSurnameKanji.toString()))
            .replaceAll("\\{" + "japaneseGivenNameKanji" + "\\}", apiClient.escapeString(japaneseGivenNameKanji.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call japaneseNameLatinCandidatesValidateBeforeCall(String japaneseSurnameKanji, String japaneseGivenNameKanji, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'japaneseSurnameKanji' is set
        if (japaneseSurnameKanji == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameKanji' when calling japaneseNameLatinCandidates(Async)");
        }
        
        // verify the required parameter 'japaneseGivenNameKanji' is set
        if (japaneseGivenNameKanji == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameKanji' when calling japaneseNameLatinCandidates(Async)");
        }
        

        com.squareup.okhttp.Call call = japaneseNameLatinCandidatesCall(japaneseSurnameKanji, japaneseGivenNameKanji, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Romanize japanese name, based on the name in Kanji.
     * 
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @return RomanizedNameOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RomanizedNameOut japaneseNameLatinCandidates(String japaneseSurnameKanji, String japaneseGivenNameKanji) throws ApiException {
        ApiResponse<RomanizedNameOut> resp = japaneseNameLatinCandidatesWithHttpInfo(japaneseSurnameKanji, japaneseGivenNameKanji);
        return resp.getData();
    }

    /**
     * Romanize japanese name, based on the name in Kanji.
     * 
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @return ApiResponse&lt;RomanizedNameOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RomanizedNameOut> japaneseNameLatinCandidatesWithHttpInfo(String japaneseSurnameKanji, String japaneseGivenNameKanji) throws ApiException {
        com.squareup.okhttp.Call call = japaneseNameLatinCandidatesValidateBeforeCall(japaneseSurnameKanji, japaneseGivenNameKanji, null, null);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Romanize japanese name, based on the name in Kanji. (asynchronously)
     * 
     * @param japaneseSurnameKanji  (required)
     * @param japaneseGivenNameKanji  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call japaneseNameLatinCandidatesAsync(String japaneseSurnameKanji, String japaneseGivenNameKanji, final ApiCallback<RomanizedNameOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = japaneseNameLatinCandidatesValidateBeforeCall(japaneseSurnameKanji, japaneseGivenNameKanji, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for japaneseNameLatinCandidatesBatch
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call japaneseNameLatinCandidatesBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameLatinCandidatesBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call japaneseNameLatinCandidatesBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = japaneseNameLatinCandidatesBatchCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Romanize japanese names, based on the name in KANJI
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchNameMatchCandidatesOut japaneseNameLatinCandidatesBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> resp = japaneseNameLatinCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
        return resp.getData();
    }

    /**
     * Romanize japanese names, based on the name in KANJI
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchNameMatchCandidatesOut> japaneseNameLatinCandidatesBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        com.squareup.okhttp.Call call = japaneseNameLatinCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Romanize japanese names, based on the name in KANJI (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call japaneseNameLatinCandidatesBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchNameMatchCandidatesOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = japaneseNameLatinCandidatesBatchValidateBeforeCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for japaneseNameMatch
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call japaneseNameMatchCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}"
            .replaceAll("\\{" + "japaneseSurnameLatin" + "\\}", apiClient.escapeString(japaneseSurnameLatin.toString()))
            .replaceAll("\\{" + "japaneseGivenNameLatin" + "\\}", apiClient.escapeString(japaneseGivenNameLatin.toString()))
            .replaceAll("\\{" + "japaneseName" + "\\}", apiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call japaneseNameMatchValidateBeforeCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'japaneseSurnameLatin' is set
        if (japaneseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameMatch(Async)");
        }
        
        // verify the required parameter 'japaneseGivenNameLatin' is set
        if (japaneseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameMatch(Async)");
        }
        
        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling japaneseNameMatch(Async)");
        }
        

        com.squareup.okhttp.Call call = japaneseNameMatchCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return RomanizedNameOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RomanizedNameOut japaneseNameMatch(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        ApiResponse<RomanizedNameOut> resp = japaneseNameMatchWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
        return resp.getData();
    }

    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return ApiResponse&lt;RomanizedNameOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RomanizedNameOut> japaneseNameMatchWithHttpInfo(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        com.squareup.okhttp.Call call = japaneseNameMatchValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, null, null);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call japaneseNameMatchAsync(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback<RomanizedNameOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = japaneseNameMatchValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for japaneseNameMatchBatch
     * @param batchFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call japaneseNameMatchBatchCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchFirstLastNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameMatchBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call japaneseNameMatchBatchValidateBeforeCall(BatchFirstLastNameIn batchFirstLastNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = japaneseNameMatchBatchCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return BatchNameMatchCandidatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchNameMatchCandidatesOut japaneseNameMatchBatch(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        ApiResponse<BatchNameMatchCandidatesOut> resp = japaneseNameMatchBatchWithHttpInfo(batchFirstLastNameIn);
        return resp.getData();
    }

    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
     * 
     * @param batchFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @return ApiResponse&lt;BatchNameMatchCandidatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchNameMatchCandidatesOut> japaneseNameMatchBatchWithHttpInfo(BatchFirstLastNameIn batchFirstLastNameIn) throws ApiException {
        com.squareup.okhttp.Call call = japaneseNameMatchBatchValidateBeforeCall(batchFirstLastNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae (asynchronously)
     * 
     * @param batchFirstLastNameIn A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call japaneseNameMatchBatchAsync(BatchFirstLastNameIn batchFirstLastNameIn, final ApiCallback<BatchNameMatchCandidatesOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = japaneseNameMatchBatchValidateBeforeCall(batchFirstLastNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchNameMatchCandidatesOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for japaneseNameMatchFeedbackLoop
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call japaneseNameMatchFeedbackLoopCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}"
            .replaceAll("\\{" + "japaneseSurnameLatin" + "\\}", apiClient.escapeString(japaneseSurnameLatin.toString()))
            .replaceAll("\\{" + "japaneseGivenNameLatin" + "\\}", apiClient.escapeString(japaneseGivenNameLatin.toString()))
            .replaceAll("\\{" + "japaneseName" + "\\}", apiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call japaneseNameMatchFeedbackLoopValidateBeforeCall(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'japaneseSurnameLatin' is set
        if (japaneseSurnameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseSurnameLatin' when calling japaneseNameMatchFeedbackLoop(Async)");
        }
        
        // verify the required parameter 'japaneseGivenNameLatin' is set
        if (japaneseGivenNameLatin == null) {
            throw new ApiException("Missing the required parameter 'japaneseGivenNameLatin' when calling japaneseNameMatchFeedbackLoop(Async)");
        }
        
        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling japaneseNameMatchFeedbackLoop(Async)");
        }
        

        com.squareup.okhttp.Call call = japaneseNameMatchFeedbackLoopCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return RomanizedNameOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RomanizedNameOut japaneseNameMatchFeedbackLoop(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        ApiResponse<RomanizedNameOut> resp = japaneseNameMatchFeedbackLoopWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
        return resp.getData();
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @return ApiResponse&lt;RomanizedNameOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RomanizedNameOut> japaneseNameMatchFeedbackLoopWithHttpInfo(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName) throws ApiException {
        com.squareup.okhttp.Call call = japaneseNameMatchFeedbackLoopValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, null, null);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseSurnameLatin  (required)
     * @param japaneseGivenNameLatin  (required)
     * @param japaneseName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call japaneseNameMatchFeedbackLoopAsync(String japaneseSurnameLatin, String japaneseGivenNameLatin, String japaneseName, final ApiCallback<RomanizedNameOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = japaneseNameMatchFeedbackLoopValidateBeforeCall(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RomanizedNameOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for parseJapaneseName
     * @param japaneseName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call parseJapaneseNameCall(String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api2/json/parseJapaneseName/{japaneseName}"
            .replaceAll("\\{" + "japaneseName" + "\\}", apiClient.escapeString(japaneseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call parseJapaneseNameValidateBeforeCall(String japaneseName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'japaneseName' is set
        if (japaneseName == null) {
            throw new ApiException("Missing the required parameter 'japaneseName' when calling parseJapaneseName(Async)");
        }
        

        com.squareup.okhttp.Call call = parseJapaneseNameCall(japaneseName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
     * 
     * @param japaneseName  (required)
     * @return PersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonalNameParsedOut parseJapaneseName(String japaneseName) throws ApiException {
        ApiResponse<PersonalNameParsedOut> resp = parseJapaneseNameWithHttpInfo(japaneseName);
        return resp.getData();
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
     * 
     * @param japaneseName  (required)
     * @return ApiResponse&lt;PersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonalNameParsedOut> parseJapaneseNameWithHttpInfo(String japaneseName) throws ApiException {
        com.squareup.okhttp.Call call = parseJapaneseNameValidateBeforeCall(japaneseName, null, null);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae (asynchronously)
     * 
     * @param japaneseName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call parseJapaneseNameAsync(String japaneseName, final ApiCallback<PersonalNameParsedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = parseJapaneseNameValidateBeforeCall(japaneseName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonalNameParsedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for parseJapaneseNameBatch
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call parseJapaneseNameBatchCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchPersonalNameIn;

        // create path and map variables
        String localVarPath = "/api2/json/parseJapaneseNameBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call parseJapaneseNameBatchValidateBeforeCall(BatchPersonalNameIn batchPersonalNameIn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = parseJapaneseNameBatchCall(batchPersonalNameIn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return BatchPersonalNameParsedOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchPersonalNameParsedOut parseJapaneseNameBatch(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        ApiResponse<BatchPersonalNameParsedOut> resp = parseJapaneseNameBatchWithHttpInfo(batchPersonalNameIn);
        return resp.getData();
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @return ApiResponse&lt;BatchPersonalNameParsedOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchPersonalNameParsedOut> parseJapaneseNameBatchWithHttpInfo(BatchPersonalNameIn batchPersonalNameIn) throws ApiException {
        com.squareup.okhttp.Call call = parseJapaneseNameBatchValidateBeforeCall(batchPersonalNameIn, null, null);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  (asynchronously)
     * 
     * @param batchPersonalNameIn A list of personal names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call parseJapaneseNameBatchAsync(BatchPersonalNameIn batchPersonalNameIn, final ApiCallback<BatchPersonalNameParsedOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = parseJapaneseNameBatchValidateBeforeCall(batchPersonalNameIn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchPersonalNameParsedOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
