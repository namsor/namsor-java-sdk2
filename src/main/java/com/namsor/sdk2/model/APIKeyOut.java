/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.namsor.sdk2.model.CommunityEngageOptionOut;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.namsor.sdk2.invoke.JSON;

/**
 * APIKeyOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-28T10:15:07.323+01:00[Europe/Berlin]")
public class APIKeyOut {
  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_VETTED = "vetted";
  @SerializedName(SERIALIZED_NAME_VETTED)
  private Boolean vetted;

  public static final String SERIALIZED_NAME_LEARNABLE = "learnable";
  @SerializedName(SERIALIZED_NAME_LEARNABLE)
  private Boolean learnable;

  public static final String SERIALIZED_NAME_ANONYMIZED = "anonymized";
  @SerializedName(SERIALIZED_NAME_ANONYMIZED)
  private Boolean anonymized;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private Boolean partner;

  public static final String SERIALIZED_NAME_STRIPED = "striped";
  @SerializedName(SERIALIZED_NAME_STRIPED)
  private Boolean striped;

  public static final String SERIALIZED_NAME_CORPORATE = "corporate";
  @SerializedName(SERIALIZED_NAME_CORPORATE)
  private Boolean corporate;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EXPLAINABLE = "explainable";
  @SerializedName(SERIALIZED_NAME_EXPLAINABLE)
  private Boolean explainable;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_COMMUNITY_ENGAGE_OPTION = "communityEngageOption";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_ENGAGE_OPTION)
  private CommunityEngageOptionOut communityEngageOption;

  public APIKeyOut() {
  }

  public APIKeyOut apiKey(String apiKey) {
    
    this.apiKey = apiKey;
    return this;
  }

   /**
   * The user API Key.
   * @return apiKey
  **/
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }


  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public APIKeyOut userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The user identifier.
   * @return userId
  **/
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public APIKeyOut admin(Boolean admin) {
    
    this.admin = admin;
    return this;
  }

   /**
   * The API Key has admin role.
   * @return admin
  **/
  @javax.annotation.Nullable
  public Boolean getAdmin() {
    return admin;
  }


  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public APIKeyOut vetted(Boolean vetted) {
    
    this.vetted = vetted;
    return this;
  }

   /**
   * The API Key is vetted (assumed truthful) for machine learning.
   * @return vetted
  **/
  @javax.annotation.Nullable
  public Boolean getVetted() {
    return vetted;
  }


  public void setVetted(Boolean vetted) {
    this.vetted = vetted;
  }


  public APIKeyOut learnable(Boolean learnable) {
    
    this.learnable = learnable;
    return this;
  }

   /**
   * The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable&#x3D;false and anonymized&#x3D;true for highest privacy (ie. to forget data as it&#39;s processed).
   * @return learnable
  **/
  @javax.annotation.Nullable
  public Boolean getLearnable() {
    return learnable;
  }


  public void setLearnable(Boolean learnable) {
    this.learnable = learnable;
  }


  public APIKeyOut anonymized(Boolean anonymized) {
    
    this.anonymized = anonymized;
    return this;
  }

   /**
   * The API Key is anonymized (using SHA-252 digest for logging). Set learnable&#x3D;false and anonymized&#x3D;true for highest privacy (ie. to forget data as it&#39;s processed).
   * @return anonymized
  **/
  @javax.annotation.Nullable
  public Boolean getAnonymized() {
    return anonymized;
  }


  public void setAnonymized(Boolean anonymized) {
    this.anonymized = anonymized;
  }


  public APIKeyOut partner(Boolean partner) {
    
    this.partner = partner;
    return this;
  }

   /**
   * The API Key has partner role.
   * @return partner
  **/
  @javax.annotation.Nullable
  public Boolean getPartner() {
    return partner;
  }


  public void setPartner(Boolean partner) {
    this.partner = partner;
  }


  public APIKeyOut striped(Boolean striped) {
    
    this.striped = striped;
    return this;
  }

   /**
   * The API Key is associated to a valid Stripe account.
   * @return striped
  **/
  @javax.annotation.Nullable
  public Boolean getStriped() {
    return striped;
  }


  public void setStriped(Boolean striped) {
    this.striped = striped;
  }


  public APIKeyOut corporate(Boolean corporate) {
    
    this.corporate = corporate;
    return this;
  }

   /**
   * The API Key has role corporate (ex SWIFT payments instead of Stripe payments).
   * @return corporate
  **/
  @javax.annotation.Nullable
  public Boolean getCorporate() {
    return corporate;
  }


  public void setCorporate(Boolean corporate) {
    this.corporate = corporate;
  }


  public APIKeyOut disabled(Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

   /**
   * The API Key is temporarily or permanently disabled.
   * @return disabled
  **/
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }


  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public APIKeyOut explainable(Boolean explainable) {
    
    this.explainable = explainable;
    return this;
  }

   /**
   * The API Key supports the AI explainability option (may require a specific license).
   * @return explainable
  **/
  @javax.annotation.Nullable
  public Boolean getExplainable() {
    return explainable;
  }


  public void setExplainable(Boolean explainable) {
    this.explainable = explainable;
  }


  public APIKeyOut ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public APIKeyOut communityEngageOption(CommunityEngageOptionOut communityEngageOption) {
    
    this.communityEngageOption = communityEngageOption;
    return this;
  }

   /**
   * Get communityEngageOption
   * @return communityEngageOption
  **/
  @javax.annotation.Nullable
  public CommunityEngageOptionOut getCommunityEngageOption() {
    return communityEngageOption;
  }


  public void setCommunityEngageOption(CommunityEngageOptionOut communityEngageOption) {
    this.communityEngageOption = communityEngageOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIKeyOut apIKeyOut = (APIKeyOut) o;
    return Objects.equals(this.apiKey, apIKeyOut.apiKey) &&
        Objects.equals(this.userId, apIKeyOut.userId) &&
        Objects.equals(this.admin, apIKeyOut.admin) &&
        Objects.equals(this.vetted, apIKeyOut.vetted) &&
        Objects.equals(this.learnable, apIKeyOut.learnable) &&
        Objects.equals(this.anonymized, apIKeyOut.anonymized) &&
        Objects.equals(this.partner, apIKeyOut.partner) &&
        Objects.equals(this.striped, apIKeyOut.striped) &&
        Objects.equals(this.corporate, apIKeyOut.corporate) &&
        Objects.equals(this.disabled, apIKeyOut.disabled) &&
        Objects.equals(this.explainable, apIKeyOut.explainable) &&
        Objects.equals(this.ipAddress, apIKeyOut.ipAddress) &&
        Objects.equals(this.communityEngageOption, apIKeyOut.communityEngageOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, userId, admin, vetted, learnable, anonymized, partner, striped, corporate, disabled, explainable, ipAddress, communityEngageOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIKeyOut {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    vetted: ").append(toIndentedString(vetted)).append("\n");
    sb.append("    learnable: ").append(toIndentedString(learnable)).append("\n");
    sb.append("    anonymized: ").append(toIndentedString(anonymized)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    striped: ").append(toIndentedString(striped)).append("\n");
    sb.append("    corporate: ").append(toIndentedString(corporate)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    explainable: ").append(toIndentedString(explainable)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    communityEngageOption: ").append(toIndentedString(communityEngageOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKey");
    openapiFields.add("userId");
    openapiFields.add("admin");
    openapiFields.add("vetted");
    openapiFields.add("learnable");
    openapiFields.add("anonymized");
    openapiFields.add("partner");
    openapiFields.add("striped");
    openapiFields.add("corporate");
    openapiFields.add("disabled");
    openapiFields.add("explainable");
    openapiFields.add("ipAddress");
    openapiFields.add("communityEngageOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIKeyOut
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIKeyOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIKeyOut is not found in the empty JSON string", APIKeyOut.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIKeyOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIKeyOut` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) && !jsonObj.get("apiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // validate the optional field `communityEngageOption`
      if (jsonObj.get("communityEngageOption") != null && !jsonObj.get("communityEngageOption").isJsonNull()) {
        CommunityEngageOptionOut.validateJsonObject(jsonObj.getAsJsonObject("communityEngageOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIKeyOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIKeyOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIKeyOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIKeyOut.class));

       return (TypeAdapter<T>) new TypeAdapter<APIKeyOut>() {
           @Override
           public void write(JsonWriter out, APIKeyOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIKeyOut read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIKeyOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIKeyOut
  * @throws IOException if the JSON string is invalid with respect to APIKeyOut
  */
  public static APIKeyOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIKeyOut.class);
  }

 /**
  * Convert an instance of APIKeyOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

