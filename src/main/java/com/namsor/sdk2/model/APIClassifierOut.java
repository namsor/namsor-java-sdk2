/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.30
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The list of classifiers and versions.
 */
@ApiModel(description = "The list of classifiers and versions.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-11T10:56:47.519625+02:00[Europe/Berlin]")
public class APIClassifierOut {
  public static final String SERIALIZED_NAME_CLASSIFIER_NAME = "classifierName";
  @SerializedName(SERIALIZED_NAME_CLASSIFIER_NAME)
  private String classifierName;

  public static final String SERIALIZED_NAME_SERVING = "serving";
  @SerializedName(SERIALIZED_NAME_SERVING)
  private Boolean serving;

  public static final String SERIALIZED_NAME_LEARNING = "learning";
  @SerializedName(SERIALIZED_NAME_LEARNING)
  private Boolean learning;

  public static final String SERIALIZED_NAME_SHUTTING_DOWN = "shuttingDown";
  @SerializedName(SERIALIZED_NAME_SHUTTING_DOWN)
  private Boolean shuttingDown;

  public static final String SERIALIZED_NAME_PROBABILITY_CALIBRATED = "probabilityCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_CALIBRATED)
  private Boolean probabilityCalibrated;

  public APIClassifierOut classifierName(String classifierName) {
    this.classifierName = classifierName;
    return this;
  }

   /**
   * The classifier name
   * @return classifierName
  **/
  @ApiModelProperty(value = "The classifier name")
  public String getClassifierName() {
    return classifierName;
  }

  public void setClassifierName(String classifierName) {
    this.classifierName = classifierName;
  }

  public APIClassifierOut serving(Boolean serving) {
    this.serving = serving;
    return this;
  }

   /**
   * True if the classifier is serving requests (has reached minimal learning, is not shutting down)
   * @return serving
  **/
  @ApiModelProperty(value = "True if the classifier is serving requests (has reached minimal learning, is not shutting down)")
  public Boolean getServing() {
    return serving;
  }

  public void setServing(Boolean serving) {
    this.serving = serving;
  }

  public APIClassifierOut learning(Boolean learning) {
    this.learning = learning;
    return this;
  }

   /**
   * True if the classifier is learning
   * @return learning
  **/
  @ApiModelProperty(value = "True if the classifier is learning")
  public Boolean getLearning() {
    return learning;
  }

  public void setLearning(Boolean learning) {
    this.learning = learning;
  }

  public APIClassifierOut shuttingDown(Boolean shuttingDown) {
    this.shuttingDown = shuttingDown;
    return this;
  }

   /**
   * True if the classifier is shutting down
   * @return shuttingDown
  **/
  @ApiModelProperty(value = "True if the classifier is shutting down")
  public Boolean getShuttingDown() {
    return shuttingDown;
  }

  public void setShuttingDown(Boolean shuttingDown) {
    this.shuttingDown = shuttingDown;
  }

  public APIClassifierOut probabilityCalibrated(Boolean probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
    return this;
  }

   /**
   * True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)
   * @return probabilityCalibrated
  **/
  @ApiModelProperty(value = "True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)")
  public Boolean getProbabilityCalibrated() {
    return probabilityCalibrated;
  }

  public void setProbabilityCalibrated(Boolean probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIClassifierOut apIClassifierOut = (APIClassifierOut) o;
    return Objects.equals(this.classifierName, apIClassifierOut.classifierName) &&
        Objects.equals(this.serving, apIClassifierOut.serving) &&
        Objects.equals(this.learning, apIClassifierOut.learning) &&
        Objects.equals(this.shuttingDown, apIClassifierOut.shuttingDown) &&
        Objects.equals(this.probabilityCalibrated, apIClassifierOut.probabilityCalibrated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classifierName, serving, learning, shuttingDown, probabilityCalibrated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIClassifierOut {\n");
    sb.append("    classifierName: ").append(toIndentedString(classifierName)).append("\n");
    sb.append("    serving: ").append(toIndentedString(serving)).append("\n");
    sb.append("    learning: ").append(toIndentedString(learning)).append("\n");
    sb.append("    shuttingDown: ").append(toIndentedString(shuttingDown)).append("\n");
    sb.append("    probabilityCalibrated: ").append(toIndentedString(probabilityCalibrated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

