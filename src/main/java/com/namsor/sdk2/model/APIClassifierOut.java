/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.namsor.sdk2.invoke.JSON;

/**
 * The list of classifiers and versions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-16T08:45:49.006+02:00[Europe/Berlin]")
public class APIClassifierOut {
  public static final String SERIALIZED_NAME_CLASSIFIER_NAME = "classifierName";
  @SerializedName(SERIALIZED_NAME_CLASSIFIER_NAME)
  private String classifierName;

  public static final String SERIALIZED_NAME_SERVING = "serving";
  @SerializedName(SERIALIZED_NAME_SERVING)
  private Boolean serving;

  public static final String SERIALIZED_NAME_LEARNING = "learning";
  @SerializedName(SERIALIZED_NAME_LEARNING)
  private Boolean learning;

  public static final String SERIALIZED_NAME_SHUTTING_DOWN = "shuttingDown";
  @SerializedName(SERIALIZED_NAME_SHUTTING_DOWN)
  private Boolean shuttingDown;

  public static final String SERIALIZED_NAME_PROBABILITY_CALIBRATED = "probabilityCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_CALIBRATED)
  private Boolean probabilityCalibrated;

  public APIClassifierOut() {
  }

  public APIClassifierOut classifierName(String classifierName) {
    
    this.classifierName = classifierName;
    return this;
  }

   /**
   * The classifier name
   * @return classifierName
  **/
  @javax.annotation.Nullable
  public String getClassifierName() {
    return classifierName;
  }


  public void setClassifierName(String classifierName) {
    this.classifierName = classifierName;
  }


  public APIClassifierOut serving(Boolean serving) {
    
    this.serving = serving;
    return this;
  }

   /**
   * True if the classifier is serving requests (has reached minimal learning, is not shutting down)
   * @return serving
  **/
  @javax.annotation.Nullable
  public Boolean getServing() {
    return serving;
  }


  public void setServing(Boolean serving) {
    this.serving = serving;
  }


  public APIClassifierOut learning(Boolean learning) {
    
    this.learning = learning;
    return this;
  }

   /**
   * True if the classifier is learning
   * @return learning
  **/
  @javax.annotation.Nullable
  public Boolean getLearning() {
    return learning;
  }


  public void setLearning(Boolean learning) {
    this.learning = learning;
  }


  public APIClassifierOut shuttingDown(Boolean shuttingDown) {
    
    this.shuttingDown = shuttingDown;
    return this;
  }

   /**
   * True if the classifier is shutting down
   * @return shuttingDown
  **/
  @javax.annotation.Nullable
  public Boolean getShuttingDown() {
    return shuttingDown;
  }


  public void setShuttingDown(Boolean shuttingDown) {
    this.shuttingDown = shuttingDown;
  }


  public APIClassifierOut probabilityCalibrated(Boolean probabilityCalibrated) {
    
    this.probabilityCalibrated = probabilityCalibrated;
    return this;
  }

   /**
   * True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)
   * @return probabilityCalibrated
  **/
  @javax.annotation.Nullable
  public Boolean getProbabilityCalibrated() {
    return probabilityCalibrated;
  }


  public void setProbabilityCalibrated(Boolean probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIClassifierOut apIClassifierOut = (APIClassifierOut) o;
    return Objects.equals(this.classifierName, apIClassifierOut.classifierName) &&
        Objects.equals(this.serving, apIClassifierOut.serving) &&
        Objects.equals(this.learning, apIClassifierOut.learning) &&
        Objects.equals(this.shuttingDown, apIClassifierOut.shuttingDown) &&
        Objects.equals(this.probabilityCalibrated, apIClassifierOut.probabilityCalibrated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classifierName, serving, learning, shuttingDown, probabilityCalibrated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIClassifierOut {\n");
    sb.append("    classifierName: ").append(toIndentedString(classifierName)).append("\n");
    sb.append("    serving: ").append(toIndentedString(serving)).append("\n");
    sb.append("    learning: ").append(toIndentedString(learning)).append("\n");
    sb.append("    shuttingDown: ").append(toIndentedString(shuttingDown)).append("\n");
    sb.append("    probabilityCalibrated: ").append(toIndentedString(probabilityCalibrated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classifierName");
    openapiFields.add("serving");
    openapiFields.add("learning");
    openapiFields.add("shuttingDown");
    openapiFields.add("probabilityCalibrated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIClassifierOut
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIClassifierOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIClassifierOut is not found in the empty JSON string", APIClassifierOut.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIClassifierOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIClassifierOut` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("classifierName") != null && !jsonObj.get("classifierName").isJsonNull()) && !jsonObj.get("classifierName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classifierName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classifierName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIClassifierOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIClassifierOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIClassifierOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIClassifierOut.class));

       return (TypeAdapter<T>) new TypeAdapter<APIClassifierOut>() {
           @Override
           public void write(JsonWriter out, APIClassifierOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIClassifierOut read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIClassifierOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIClassifierOut
  * @throws IOException if the JSON string is invalid with respect to APIClassifierOut
  */
  public static APIClassifierOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIClassifierOut.class);
  }

 /**
  * Convert an instance of APIClassifierOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

