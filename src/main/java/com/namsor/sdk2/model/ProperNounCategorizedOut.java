/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.26
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Classified typed proper names
 */
@ApiModel(description = "Classified typed proper names")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-19T20:11:11.018+02:00[Europe/Berlin]")
public class ProperNounCategorizedOut {
  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMMON_TYPE = "commonType";
  @SerializedName(SERIALIZED_NAME_COMMON_TYPE)
  private String commonType;

  public static final String SERIALIZED_NAME_COMMON_TYPE_ALT = "commonTypeAlt";
  @SerializedName(SERIALIZED_NAME_COMMON_TYPE_ALT)
  private String commonTypeAlt;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public ProperNounCategorizedOut script(String script) {
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @ApiModelProperty(value = "")
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }

  public ProperNounCategorizedOut id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProperNounCategorizedOut explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

   /**
   * Get explanation
   * @return explanation
  **/
  @ApiModelProperty(value = "")
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }

  public ProperNounCategorizedOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The input name
   * @return name
  **/
  @ApiModelProperty(value = "The input name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProperNounCategorizedOut commonType(String commonType) {
    this.commonType = commonType;
    return this;
  }

   /**
   * The most likely common name type
   * @return commonType
  **/
  @ApiModelProperty(value = "The most likely common name type")
  public String getCommonType() {
    return commonType;
  }

  public void setCommonType(String commonType) {
    this.commonType = commonType;
  }

  public ProperNounCategorizedOut commonTypeAlt(String commonTypeAlt) {
    this.commonTypeAlt = commonTypeAlt;
    return this;
  }

   /**
   * Best alternative for : The most likely common name type
   * @return commonTypeAlt
  **/
  @ApiModelProperty(value = "Best alternative for : The most likely common name type")
  public String getCommonTypeAlt() {
    return commonTypeAlt;
  }

  public void setCommonTypeAlt(String commonTypeAlt) {
    this.commonTypeAlt = commonTypeAlt;
  }

  public ProperNounCategorizedOut score(Double score) {
    this.score = score;
    return this;
  }

   /**
   * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * minimum: 0
   * maximum: 100
   * @return score
  **/
  @ApiModelProperty(value = "Higher score is better, but score is not normalized. Use calibratedProbability if available. ")
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProperNounCategorizedOut properNounCategorizedOut = (ProperNounCategorizedOut) o;
    return Objects.equals(this.script, properNounCategorizedOut.script) &&
        Objects.equals(this.id, properNounCategorizedOut.id) &&
        Objects.equals(this.explanation, properNounCategorizedOut.explanation) &&
        Objects.equals(this.name, properNounCategorizedOut.name) &&
        Objects.equals(this.commonType, properNounCategorizedOut.commonType) &&
        Objects.equals(this.commonTypeAlt, properNounCategorizedOut.commonTypeAlt) &&
        Objects.equals(this.score, properNounCategorizedOut.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(script, id, explanation, name, commonType, commonTypeAlt, score);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProperNounCategorizedOut {\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    commonType: ").append(toIndentedString(commonType)).append("\n");
    sb.append("    commonTypeAlt: ").append(toIndentedString(commonTypeAlt)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

