/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.namsor.sdk2.invoke.JSON;

/**
 * Classified typed proper names
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-28T10:15:07.323+01:00[Europe/Berlin]")
public class ProperNounCategorizedOut {
  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMMON_TYPE = "commonType";
  @SerializedName(SERIALIZED_NAME_COMMON_TYPE)
  private String commonType;

  public static final String SERIALIZED_NAME_COMMON_TYPE_ALT = "commonTypeAlt";
  @SerializedName(SERIALIZED_NAME_COMMON_TYPE_ALT)
  private String commonTypeAlt;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public ProperNounCategorizedOut() {
  }

  public ProperNounCategorizedOut script(String script) {
    
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }


  public void setScript(String script) {
    this.script = script;
  }


  public ProperNounCategorizedOut id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ProperNounCategorizedOut explanation(String explanation) {
    
    this.explanation = explanation;
    return this;
  }

   /**
   * Get explanation
   * @return explanation
  **/
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }


  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public ProperNounCategorizedOut name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The input name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ProperNounCategorizedOut commonType(String commonType) {
    
    this.commonType = commonType;
    return this;
  }

   /**
   * The most likely common name type
   * @return commonType
  **/
  @javax.annotation.Nullable
  public String getCommonType() {
    return commonType;
  }


  public void setCommonType(String commonType) {
    this.commonType = commonType;
  }


  public ProperNounCategorizedOut commonTypeAlt(String commonTypeAlt) {
    
    this.commonTypeAlt = commonTypeAlt;
    return this;
  }

   /**
   * Best alternative for : The most likely common name type
   * @return commonTypeAlt
  **/
  @javax.annotation.Nullable
  public String getCommonTypeAlt() {
    return commonTypeAlt;
  }


  public void setCommonTypeAlt(String commonTypeAlt) {
    this.commonTypeAlt = commonTypeAlt;
  }


  public ProperNounCategorizedOut score(Double score) {
    
    this.score = score;
    return this;
  }

   /**
   * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * minimum: 0
   * maximum: 100
   * @return score
  **/
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }


  public void setScore(Double score) {
    this.score = score;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProperNounCategorizedOut properNounCategorizedOut = (ProperNounCategorizedOut) o;
    return Objects.equals(this.script, properNounCategorizedOut.script) &&
        Objects.equals(this.id, properNounCategorizedOut.id) &&
        Objects.equals(this.explanation, properNounCategorizedOut.explanation) &&
        Objects.equals(this.name, properNounCategorizedOut.name) &&
        Objects.equals(this.commonType, properNounCategorizedOut.commonType) &&
        Objects.equals(this.commonTypeAlt, properNounCategorizedOut.commonTypeAlt) &&
        Objects.equals(this.score, properNounCategorizedOut.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(script, id, explanation, name, commonType, commonTypeAlt, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProperNounCategorizedOut {\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    commonType: ").append(toIndentedString(commonType)).append("\n");
    sb.append("    commonTypeAlt: ").append(toIndentedString(commonTypeAlt)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("script");
    openapiFields.add("id");
    openapiFields.add("explanation");
    openapiFields.add("name");
    openapiFields.add("commonType");
    openapiFields.add("commonTypeAlt");
    openapiFields.add("score");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProperNounCategorizedOut
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProperNounCategorizedOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProperNounCategorizedOut is not found in the empty JSON string", ProperNounCategorizedOut.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProperNounCategorizedOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProperNounCategorizedOut` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("commonType") != null && !jsonObj.get("commonType").isJsonNull()) && !jsonObj.get("commonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonType").toString()));
      }
      if ((jsonObj.get("commonTypeAlt") != null && !jsonObj.get("commonTypeAlt").isJsonNull()) && !jsonObj.get("commonTypeAlt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonTypeAlt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonTypeAlt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProperNounCategorizedOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProperNounCategorizedOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProperNounCategorizedOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProperNounCategorizedOut.class));

       return (TypeAdapter<T>) new TypeAdapter<ProperNounCategorizedOut>() {
           @Override
           public void write(JsonWriter out, ProperNounCategorizedOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProperNounCategorizedOut read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProperNounCategorizedOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProperNounCategorizedOut
  * @throws IOException if the JSON string is invalid with respect to ProperNounCategorizedOut
  */
  public static ProperNounCategorizedOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProperNounCategorizedOut.class);
  }

 /**
  * Convert an instance of ProperNounCategorizedOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

