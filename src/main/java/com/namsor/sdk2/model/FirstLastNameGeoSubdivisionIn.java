/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.namsor.sdk2.invoke.JSON;

/**
 * FirstLastNameGeoSubdivisionIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-16T08:45:49.006+02:00[Europe/Berlin]")
public class FirstLastNameGeoSubdivisionIn {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_COUNTRY_ISO2 = "countryIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO2)
  private String countryIso2;

  public static final String SERIALIZED_NAME_SUBDIVISION_ISO = "subdivisionIso";
  @SerializedName(SERIALIZED_NAME_SUBDIVISION_ISO)
  private String subdivisionIso;

  public FirstLastNameGeoSubdivisionIn() {
  }

  public FirstLastNameGeoSubdivisionIn id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public FirstLastNameGeoSubdivisionIn firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public FirstLastNameGeoSubdivisionIn lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public FirstLastNameGeoSubdivisionIn countryIso2(String countryIso2) {
    
    this.countryIso2 = countryIso2;
    return this;
  }

   /**
   * Get countryIso2
   * @return countryIso2
  **/
  @javax.annotation.Nullable
  public String getCountryIso2() {
    return countryIso2;
  }


  public void setCountryIso2(String countryIso2) {
    this.countryIso2 = countryIso2;
  }


  public FirstLastNameGeoSubdivisionIn subdivisionIso(String subdivisionIso) {
    
    this.subdivisionIso = subdivisionIso;
    return this;
  }

   /**
   * Get subdivisionIso
   * @return subdivisionIso
  **/
  @javax.annotation.Nullable
  public String getSubdivisionIso() {
    return subdivisionIso;
  }


  public void setSubdivisionIso(String subdivisionIso) {
    this.subdivisionIso = subdivisionIso;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirstLastNameGeoSubdivisionIn firstLastNameGeoSubdivisionIn = (FirstLastNameGeoSubdivisionIn) o;
    return Objects.equals(this.id, firstLastNameGeoSubdivisionIn.id) &&
        Objects.equals(this.firstName, firstLastNameGeoSubdivisionIn.firstName) &&
        Objects.equals(this.lastName, firstLastNameGeoSubdivisionIn.lastName) &&
        Objects.equals(this.countryIso2, firstLastNameGeoSubdivisionIn.countryIso2) &&
        Objects.equals(this.subdivisionIso, firstLastNameGeoSubdivisionIn.subdivisionIso);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, lastName, countryIso2, subdivisionIso);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirstLastNameGeoSubdivisionIn {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    countryIso2: ").append(toIndentedString(countryIso2)).append("\n");
    sb.append("    subdivisionIso: ").append(toIndentedString(subdivisionIso)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("countryIso2");
    openapiFields.add("subdivisionIso");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FirstLastNameGeoSubdivisionIn
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FirstLastNameGeoSubdivisionIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirstLastNameGeoSubdivisionIn is not found in the empty JSON string", FirstLastNameGeoSubdivisionIn.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FirstLastNameGeoSubdivisionIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirstLastNameGeoSubdivisionIn` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("countryIso2") != null && !jsonObj.get("countryIso2").isJsonNull()) && !jsonObj.get("countryIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryIso2").toString()));
      }
      if ((jsonObj.get("subdivisionIso") != null && !jsonObj.get("subdivisionIso").isJsonNull()) && !jsonObj.get("subdivisionIso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdivisionIso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdivisionIso").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirstLastNameGeoSubdivisionIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirstLastNameGeoSubdivisionIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirstLastNameGeoSubdivisionIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirstLastNameGeoSubdivisionIn.class));

       return (TypeAdapter<T>) new TypeAdapter<FirstLastNameGeoSubdivisionIn>() {
           @Override
           public void write(JsonWriter out, FirstLastNameGeoSubdivisionIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirstLastNameGeoSubdivisionIn read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FirstLastNameGeoSubdivisionIn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FirstLastNameGeoSubdivisionIn
  * @throws IOException if the JSON string is invalid with respect to FirstLastNameGeoSubdivisionIn
  */
  public static FirstLastNameGeoSubdivisionIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirstLastNameGeoSubdivisionIn.class);
  }

 /**
  * Convert an instance of FirstLastNameGeoSubdivisionIn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

