/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.26
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Classified names at sub country level (region or state)
 */
@ApiModel(description = "Classified names at sub country level (region or state)")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-19T10:33:14.621+02:00[Europe/Berlin]")
public class PersonalNameGeoSubclassificationOut {
  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COUNTRY_ISO2 = "countryIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO2)
  private String countryIso2;

  public static final String SERIALIZED_NAME_SUB_CLASSIFICATION = "subClassification";
  @SerializedName(SERIALIZED_NAME_SUB_CLASSIFICATION)
  private String subClassification;

  public static final String SERIALIZED_NAME_SUB_CLASSIFICATION_ALT = "subClassificationAlt";
  @SerializedName(SERIALIZED_NAME_SUB_CLASSIFICATION_ALT)
  private String subClassificationAlt;

  public static final String SERIALIZED_NAME_SUBCLASSIFICATION_TOP = "subclassificationTop";
  @SerializedName(SERIALIZED_NAME_SUBCLASSIFICATION_TOP)
  private List<String> subclassificationTop = new ArrayList<String>();

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_PROBABILITY_CALIBRATED = "probabilityCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_CALIBRATED)
  private Double probabilityCalibrated;

  public static final String SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED = "probabilityAltCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED)
  private Double probabilityAltCalibrated;

  public PersonalNameGeoSubclassificationOut script(String script) {
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @ApiModelProperty(value = "")
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }

  public PersonalNameGeoSubclassificationOut id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PersonalNameGeoSubclassificationOut explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

   /**
   * Get explanation
   * @return explanation
  **/
  @ApiModelProperty(value = "")
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }

  public PersonalNameGeoSubclassificationOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The input name
   * @return name
  **/
  @ApiModelProperty(value = "The input name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PersonalNameGeoSubclassificationOut countryIso2(String countryIso2) {
    this.countryIso2 = countryIso2;
    return this;
  }

   /**
   * The input country ISO2 code
   * @return countryIso2
  **/
  @ApiModelProperty(value = "The input country ISO2 code")
  public String getCountryIso2() {
    return countryIso2;
  }

  public void setCountryIso2(String countryIso2) {
    this.countryIso2 = countryIso2;
  }

  public PersonalNameGeoSubclassificationOut subClassification(String subClassification) {
    this.subClassification = subClassification;
    return this;
  }

   /**
   * Most likely subclassification ISO_3166-2 code
   * @return subClassification
  **/
  @ApiModelProperty(value = "Most likely subclassification ISO_3166-2 code")
  public String getSubClassification() {
    return subClassification;
  }

  public void setSubClassification(String subClassification) {
    this.subClassification = subClassification;
  }

  public PersonalNameGeoSubclassificationOut subClassificationAlt(String subClassificationAlt) {
    this.subClassificationAlt = subClassificationAlt;
    return this;
  }

   /**
   * Second best alternative : subclassification ISO_3166-2 code
   * @return subClassificationAlt
  **/
  @ApiModelProperty(value = "Second best alternative : subclassification ISO_3166-2 code")
  public String getSubClassificationAlt() {
    return subClassificationAlt;
  }

  public void setSubClassificationAlt(String subClassificationAlt) {
    this.subClassificationAlt = subClassificationAlt;
  }

  public PersonalNameGeoSubclassificationOut subclassificationTop(List<String> subclassificationTop) {
    this.subclassificationTop = subclassificationTop;
    return this;
  }

  public PersonalNameGeoSubclassificationOut addSubclassificationTopItem(String subclassificationTopItem) {
    if (this.subclassificationTop == null) {
      this.subclassificationTop = new ArrayList<String>();
    }
    this.subclassificationTop.add(subclassificationTopItem);
    return this;
  }

   /**
   * List subclassification ISO_3166-2 codes (top 10)
   * @return subclassificationTop
  **/
  @ApiModelProperty(value = "List subclassification ISO_3166-2 codes (top 10)")
  public List<String> getSubclassificationTop() {
    return subclassificationTop;
  }

  public void setSubclassificationTop(List<String> subclassificationTop) {
    this.subclassificationTop = subclassificationTop;
  }

  public PersonalNameGeoSubclassificationOut score(Double score) {
    this.score = score;
    return this;
  }

   /**
   * Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * minimum: 0
   * maximum: 100
   * @return score
  **/
  @ApiModelProperty(value = "Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ")
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }

  public PersonalNameGeoSubclassificationOut probabilityCalibrated(Double probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
    return this;
  }

   /**
   * The calibrated probability for subclassification to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityCalibrated
  **/
  @ApiModelProperty(value = "The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. ")
  public Double getProbabilityCalibrated() {
    return probabilityCalibrated;
  }

  public void setProbabilityCalibrated(Double probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
  }

  public PersonalNameGeoSubclassificationOut probabilityAltCalibrated(Double probabilityAltCalibrated) {
    this.probabilityAltCalibrated = probabilityAltCalibrated;
    return this;
  }

   /**
   * The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityAltCalibrated
  **/
  @ApiModelProperty(value = "The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. ")
  public Double getProbabilityAltCalibrated() {
    return probabilityAltCalibrated;
  }

  public void setProbabilityAltCalibrated(Double probabilityAltCalibrated) {
    this.probabilityAltCalibrated = probabilityAltCalibrated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalNameGeoSubclassificationOut personalNameGeoSubclassificationOut = (PersonalNameGeoSubclassificationOut) o;
    return Objects.equals(this.script, personalNameGeoSubclassificationOut.script) &&
        Objects.equals(this.id, personalNameGeoSubclassificationOut.id) &&
        Objects.equals(this.explanation, personalNameGeoSubclassificationOut.explanation) &&
        Objects.equals(this.name, personalNameGeoSubclassificationOut.name) &&
        Objects.equals(this.countryIso2, personalNameGeoSubclassificationOut.countryIso2) &&
        Objects.equals(this.subClassification, personalNameGeoSubclassificationOut.subClassification) &&
        Objects.equals(this.subClassificationAlt, personalNameGeoSubclassificationOut.subClassificationAlt) &&
        Objects.equals(this.subclassificationTop, personalNameGeoSubclassificationOut.subclassificationTop) &&
        Objects.equals(this.score, personalNameGeoSubclassificationOut.score) &&
        Objects.equals(this.probabilityCalibrated, personalNameGeoSubclassificationOut.probabilityCalibrated) &&
        Objects.equals(this.probabilityAltCalibrated, personalNameGeoSubclassificationOut.probabilityAltCalibrated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(script, id, explanation, name, countryIso2, subClassification, subClassificationAlt, subclassificationTop, score, probabilityCalibrated, probabilityAltCalibrated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalNameGeoSubclassificationOut {\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    countryIso2: ").append(toIndentedString(countryIso2)).append("\n");
    sb.append("    subClassification: ").append(toIndentedString(subClassification)).append("\n");
    sb.append("    subClassificationAlt: ").append(toIndentedString(subClassificationAlt)).append("\n");
    sb.append("    subclassificationTop: ").append(toIndentedString(subclassificationTop)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    probabilityCalibrated: ").append(toIndentedString(probabilityCalibrated)).append("\n");
    sb.append("    probabilityAltCalibrated: ").append(toIndentedString(probabilityAltCalibrated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

