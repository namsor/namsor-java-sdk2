/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.namsor.sdk2.invoke.JSON;

/**
 * List of countries and regions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-16T08:45:49.006+02:00[Europe/Berlin]")
public class RegionISO {
  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_COUNTRY_NUM_CODE = "countryNumCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NUM_CODE)
  private String countryNumCode;

  public static final String SERIALIZED_NAME_COUNTRY_I_S_O2 = "countryISO2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_I_S_O2)
  private String countryISO2;

  public static final String SERIALIZED_NAME_COUNTRY_I_S_O3 = "countryISO3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_I_S_O3)
  private String countryISO3;

  public static final String SERIALIZED_NAME_COUNTRY_F_I_P_S = "countryFIPS";
  @SerializedName(SERIALIZED_NAME_COUNTRY_F_I_P_S)
  private String countryFIPS;

  public static final String SERIALIZED_NAME_SUBREGION = "subregion";
  @SerializedName(SERIALIZED_NAME_SUBREGION)
  private String subregion;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_TOPREGION = "topregion";
  @SerializedName(SERIALIZED_NAME_TOPREGION)
  private String topregion;

  public RegionISO() {
  }

  public RegionISO countryName(String countryName) {
    
    this.countryName = countryName;
    return this;
  }

   /**
   * Get countryName
   * @return countryName
  **/
  @javax.annotation.Nullable
  public String getCountryName() {
    return countryName;
  }


  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public RegionISO countryNumCode(String countryNumCode) {
    
    this.countryNumCode = countryNumCode;
    return this;
  }

   /**
   * Get countryNumCode
   * @return countryNumCode
  **/
  @javax.annotation.Nullable
  public String getCountryNumCode() {
    return countryNumCode;
  }


  public void setCountryNumCode(String countryNumCode) {
    this.countryNumCode = countryNumCode;
  }


  public RegionISO countryISO2(String countryISO2) {
    
    this.countryISO2 = countryISO2;
    return this;
  }

   /**
   * Get countryISO2
   * @return countryISO2
  **/
  @javax.annotation.Nullable
  public String getCountryISO2() {
    return countryISO2;
  }


  public void setCountryISO2(String countryISO2) {
    this.countryISO2 = countryISO2;
  }


  public RegionISO countryISO3(String countryISO3) {
    
    this.countryISO3 = countryISO3;
    return this;
  }

   /**
   * Get countryISO3
   * @return countryISO3
  **/
  @javax.annotation.Nullable
  public String getCountryISO3() {
    return countryISO3;
  }


  public void setCountryISO3(String countryISO3) {
    this.countryISO3 = countryISO3;
  }


  public RegionISO countryFIPS(String countryFIPS) {
    
    this.countryFIPS = countryFIPS;
    return this;
  }

   /**
   * Get countryFIPS
   * @return countryFIPS
  **/
  @javax.annotation.Nullable
  public String getCountryFIPS() {
    return countryFIPS;
  }


  public void setCountryFIPS(String countryFIPS) {
    this.countryFIPS = countryFIPS;
  }


  public RegionISO subregion(String subregion) {
    
    this.subregion = subregion;
    return this;
  }

   /**
   * Get subregion
   * @return subregion
  **/
  @javax.annotation.Nullable
  public String getSubregion() {
    return subregion;
  }


  public void setSubregion(String subregion) {
    this.subregion = subregion;
  }


  public RegionISO region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public RegionISO topregion(String topregion) {
    
    this.topregion = topregion;
    return this;
  }

   /**
   * Get topregion
   * @return topregion
  **/
  @javax.annotation.Nullable
  public String getTopregion() {
    return topregion;
  }


  public void setTopregion(String topregion) {
    this.topregion = topregion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionISO regionISO = (RegionISO) o;
    return Objects.equals(this.countryName, regionISO.countryName) &&
        Objects.equals(this.countryNumCode, regionISO.countryNumCode) &&
        Objects.equals(this.countryISO2, regionISO.countryISO2) &&
        Objects.equals(this.countryISO3, regionISO.countryISO3) &&
        Objects.equals(this.countryFIPS, regionISO.countryFIPS) &&
        Objects.equals(this.subregion, regionISO.subregion) &&
        Objects.equals(this.region, regionISO.region) &&
        Objects.equals(this.topregion, regionISO.topregion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryName, countryNumCode, countryISO2, countryISO3, countryFIPS, subregion, region, topregion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionISO {\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    countryNumCode: ").append(toIndentedString(countryNumCode)).append("\n");
    sb.append("    countryISO2: ").append(toIndentedString(countryISO2)).append("\n");
    sb.append("    countryISO3: ").append(toIndentedString(countryISO3)).append("\n");
    sb.append("    countryFIPS: ").append(toIndentedString(countryFIPS)).append("\n");
    sb.append("    subregion: ").append(toIndentedString(subregion)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    topregion: ").append(toIndentedString(topregion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryName");
    openapiFields.add("countryNumCode");
    openapiFields.add("countryISO2");
    openapiFields.add("countryISO3");
    openapiFields.add("countryFIPS");
    openapiFields.add("subregion");
    openapiFields.add("region");
    openapiFields.add("topregion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegionISO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RegionISO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegionISO is not found in the empty JSON string", RegionISO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RegionISO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegionISO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("countryName") != null && !jsonObj.get("countryName").isJsonNull()) && !jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      if ((jsonObj.get("countryNumCode") != null && !jsonObj.get("countryNumCode").isJsonNull()) && !jsonObj.get("countryNumCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryNumCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryNumCode").toString()));
      }
      if ((jsonObj.get("countryISO2") != null && !jsonObj.get("countryISO2").isJsonNull()) && !jsonObj.get("countryISO2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryISO2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryISO2").toString()));
      }
      if ((jsonObj.get("countryISO3") != null && !jsonObj.get("countryISO3").isJsonNull()) && !jsonObj.get("countryISO3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryISO3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryISO3").toString()));
      }
      if ((jsonObj.get("countryFIPS") != null && !jsonObj.get("countryFIPS").isJsonNull()) && !jsonObj.get("countryFIPS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryFIPS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryFIPS").toString()));
      }
      if ((jsonObj.get("subregion") != null && !jsonObj.get("subregion").isJsonNull()) && !jsonObj.get("subregion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subregion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subregion").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("topregion") != null && !jsonObj.get("topregion").isJsonNull()) && !jsonObj.get("topregion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topregion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topregion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegionISO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegionISO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegionISO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegionISO.class));

       return (TypeAdapter<T>) new TypeAdapter<RegionISO>() {
           @Override
           public void write(JsonWriter out, RegionISO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegionISO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegionISO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegionISO
  * @throws IOException if the JSON string is invalid with respect to RegionISO
  */
  public static RegionISO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegionISO.class);
  }

 /**
  * Convert an instance of RegionISO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

