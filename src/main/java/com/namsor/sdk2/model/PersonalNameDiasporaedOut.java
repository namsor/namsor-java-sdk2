/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.namsor.sdk2.model.ReligionStatOut;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.namsor.sdk2.invoke.JSON;

/**
 * Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-28T10:15:07.323+01:00[Europe/Berlin]")
public class PersonalNameDiasporaedOut {
  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_ETHNICITY_ALT = "ethnicityAlt";
  @SerializedName(SERIALIZED_NAME_ETHNICITY_ALT)
  private String ethnicityAlt;

  public static final String SERIALIZED_NAME_ETHNICITY = "ethnicity";
  @SerializedName(SERIALIZED_NAME_ETHNICITY)
  private String ethnicity;

  public static final String SERIALIZED_NAME_LIFTED = "lifted";
  @SerializedName(SERIALIZED_NAME_LIFTED)
  private Boolean lifted;

  public static final String SERIALIZED_NAME_COUNTRY_ISO2 = "countryIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO2)
  private String countryIso2;

  public static final String SERIALIZED_NAME_ETHNICITIES_TOP = "ethnicitiesTop";
  @SerializedName(SERIALIZED_NAME_ETHNICITIES_TOP)
  private List<String> ethnicitiesTop;

  public static final String SERIALIZED_NAME_PROBABILITY_CALIBRATED = "probabilityCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_CALIBRATED)
  private Double probabilityCalibrated;

  public static final String SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED = "probabilityAltCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED)
  private Double probabilityAltCalibrated;

  public static final String SERIALIZED_NAME_RELIGION_STATS = "religionStats";
  @SerializedName(SERIALIZED_NAME_RELIGION_STATS)
  private List<ReligionStatOut> religionStats;

  public static final String SERIALIZED_NAME_RELIGION_STATS_ALT = "religionStatsAlt";
  @SerializedName(SERIALIZED_NAME_RELIGION_STATS_ALT)
  private List<ReligionStatOut> religionStatsAlt;

  public PersonalNameDiasporaedOut() {
  }

  public PersonalNameDiasporaedOut script(String script) {
    
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }


  public void setScript(String script) {
    this.script = script;
  }


  public PersonalNameDiasporaedOut id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PersonalNameDiasporaedOut explanation(String explanation) {
    
    this.explanation = explanation;
    return this;
  }

   /**
   * Get explanation
   * @return explanation
  **/
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }


  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public PersonalNameDiasporaedOut name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The input name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PersonalNameDiasporaedOut score(Double score) {
    
    this.score = score;
    return this;
  }

   /**
   * Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * minimum: 0
   * maximum: 100
   * @return score
  **/
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }


  public void setScore(Double score) {
    this.score = score;
  }


  public PersonalNameDiasporaedOut ethnicityAlt(String ethnicityAlt) {
    
    this.ethnicityAlt = ethnicityAlt;
    return this;
  }

   /**
   * The second best alternative ethnicity
   * @return ethnicityAlt
  **/
  @javax.annotation.Nullable
  public String getEthnicityAlt() {
    return ethnicityAlt;
  }


  public void setEthnicityAlt(String ethnicityAlt) {
    this.ethnicityAlt = ethnicityAlt;
  }


  public PersonalNameDiasporaedOut ethnicity(String ethnicity) {
    
    this.ethnicity = ethnicity;
    return this;
  }

   /**
   * The most likely ethnicity
   * @return ethnicity
  **/
  @javax.annotation.Nullable
  public String getEthnicity() {
    return ethnicity;
  }


  public void setEthnicity(String ethnicity) {
    this.ethnicity = ethnicity;
  }


  public PersonalNameDiasporaedOut lifted(Boolean lifted) {
    
    this.lifted = lifted;
    return this;
  }

   /**
   * Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.
   * @return lifted
  **/
  @javax.annotation.Nullable
  public Boolean getLifted() {
    return lifted;
  }


  public void setLifted(Boolean lifted) {
    this.lifted = lifted;
  }


  public PersonalNameDiasporaedOut countryIso2(String countryIso2) {
    
    this.countryIso2 = countryIso2;
    return this;
  }

   /**
   * From input data, the countryIso2 of geographic context (US,CA etc.)
   * @return countryIso2
  **/
  @javax.annotation.Nullable
  public String getCountryIso2() {
    return countryIso2;
  }


  public void setCountryIso2(String countryIso2) {
    this.countryIso2 = countryIso2;
  }


  public PersonalNameDiasporaedOut ethnicitiesTop(List<String> ethnicitiesTop) {
    
    this.ethnicitiesTop = ethnicitiesTop;
    return this;
  }

  public PersonalNameDiasporaedOut addEthnicitiesTopItem(String ethnicitiesTopItem) {
    if (this.ethnicitiesTop == null) {
      this.ethnicitiesTop = new ArrayList<>();
    }
    this.ethnicitiesTop.add(ethnicitiesTopItem);
    return this;
  }

   /**
   * List most likely ethnicities (top 10)
   * @return ethnicitiesTop
  **/
  @javax.annotation.Nullable
  public List<String> getEthnicitiesTop() {
    return ethnicitiesTop;
  }


  public void setEthnicitiesTop(List<String> ethnicitiesTop) {
    this.ethnicitiesTop = ethnicitiesTop;
  }


  public PersonalNameDiasporaedOut probabilityCalibrated(Double probabilityCalibrated) {
    
    this.probabilityCalibrated = probabilityCalibrated;
    return this;
  }

   /**
   * The calibrated probability for ethnicity to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityCalibrated
  **/
  @javax.annotation.Nullable
  public Double getProbabilityCalibrated() {
    return probabilityCalibrated;
  }


  public void setProbabilityCalibrated(Double probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
  }


  public PersonalNameDiasporaedOut probabilityAltCalibrated(Double probabilityAltCalibrated) {
    
    this.probabilityAltCalibrated = probabilityAltCalibrated;
    return this;
  }

   /**
   * The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityAltCalibrated
  **/
  @javax.annotation.Nullable
  public Double getProbabilityAltCalibrated() {
    return probabilityAltCalibrated;
  }


  public void setProbabilityAltCalibrated(Double probabilityAltCalibrated) {
    this.probabilityAltCalibrated = probabilityAltCalibrated;
  }


  public PersonalNameDiasporaedOut religionStats(List<ReligionStatOut> religionStats) {
    
    this.religionStats = religionStats;
    return this;
  }

  public PersonalNameDiasporaedOut addReligionStatsItem(ReligionStatOut religionStatsItem) {
    if (this.religionStats == null) {
      this.religionStats = new ArrayList<>();
    }
    this.religionStats.add(religionStatsItem);
    return this;
  }

   /**
   * Geographic religious statistics, assuming ethnicity is correctly predicted.
   * @return religionStats
  **/
  @javax.annotation.Nullable
  public List<ReligionStatOut> getReligionStats() {
    return religionStats;
  }


  public void setReligionStats(List<ReligionStatOut> religionStats) {
    this.religionStats = religionStats;
  }


  public PersonalNameDiasporaedOut religionStatsAlt(List<ReligionStatOut> religionStatsAlt) {
    
    this.religionStatsAlt = religionStatsAlt;
    return this;
  }

  public PersonalNameDiasporaedOut addReligionStatsAltItem(ReligionStatOut religionStatsAltItem) {
    if (this.religionStatsAlt == null) {
      this.religionStatsAlt = new ArrayList<>();
    }
    this.religionStatsAlt.add(religionStatsAltItem);
    return this;
  }

   /**
   * Geographic religious statistics, for country best alternative.
   * @return religionStatsAlt
  **/
  @javax.annotation.Nullable
  public List<ReligionStatOut> getReligionStatsAlt() {
    return religionStatsAlt;
  }


  public void setReligionStatsAlt(List<ReligionStatOut> religionStatsAlt) {
    this.religionStatsAlt = religionStatsAlt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalNameDiasporaedOut personalNameDiasporaedOut = (PersonalNameDiasporaedOut) o;
    return Objects.equals(this.script, personalNameDiasporaedOut.script) &&
        Objects.equals(this.id, personalNameDiasporaedOut.id) &&
        Objects.equals(this.explanation, personalNameDiasporaedOut.explanation) &&
        Objects.equals(this.name, personalNameDiasporaedOut.name) &&
        Objects.equals(this.score, personalNameDiasporaedOut.score) &&
        Objects.equals(this.ethnicityAlt, personalNameDiasporaedOut.ethnicityAlt) &&
        Objects.equals(this.ethnicity, personalNameDiasporaedOut.ethnicity) &&
        Objects.equals(this.lifted, personalNameDiasporaedOut.lifted) &&
        Objects.equals(this.countryIso2, personalNameDiasporaedOut.countryIso2) &&
        Objects.equals(this.ethnicitiesTop, personalNameDiasporaedOut.ethnicitiesTop) &&
        Objects.equals(this.probabilityCalibrated, personalNameDiasporaedOut.probabilityCalibrated) &&
        Objects.equals(this.probabilityAltCalibrated, personalNameDiasporaedOut.probabilityAltCalibrated) &&
        Objects.equals(this.religionStats, personalNameDiasporaedOut.religionStats) &&
        Objects.equals(this.religionStatsAlt, personalNameDiasporaedOut.religionStatsAlt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(script, id, explanation, name, score, ethnicityAlt, ethnicity, lifted, countryIso2, ethnicitiesTop, probabilityCalibrated, probabilityAltCalibrated, religionStats, religionStatsAlt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalNameDiasporaedOut {\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    ethnicityAlt: ").append(toIndentedString(ethnicityAlt)).append("\n");
    sb.append("    ethnicity: ").append(toIndentedString(ethnicity)).append("\n");
    sb.append("    lifted: ").append(toIndentedString(lifted)).append("\n");
    sb.append("    countryIso2: ").append(toIndentedString(countryIso2)).append("\n");
    sb.append("    ethnicitiesTop: ").append(toIndentedString(ethnicitiesTop)).append("\n");
    sb.append("    probabilityCalibrated: ").append(toIndentedString(probabilityCalibrated)).append("\n");
    sb.append("    probabilityAltCalibrated: ").append(toIndentedString(probabilityAltCalibrated)).append("\n");
    sb.append("    religionStats: ").append(toIndentedString(religionStats)).append("\n");
    sb.append("    religionStatsAlt: ").append(toIndentedString(religionStatsAlt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("script");
    openapiFields.add("id");
    openapiFields.add("explanation");
    openapiFields.add("name");
    openapiFields.add("score");
    openapiFields.add("ethnicityAlt");
    openapiFields.add("ethnicity");
    openapiFields.add("lifted");
    openapiFields.add("countryIso2");
    openapiFields.add("ethnicitiesTop");
    openapiFields.add("probabilityCalibrated");
    openapiFields.add("probabilityAltCalibrated");
    openapiFields.add("religionStats");
    openapiFields.add("religionStatsAlt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonalNameDiasporaedOut
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PersonalNameDiasporaedOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalNameDiasporaedOut is not found in the empty JSON string", PersonalNameDiasporaedOut.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PersonalNameDiasporaedOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalNameDiasporaedOut` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ethnicityAlt") != null && !jsonObj.get("ethnicityAlt").isJsonNull()) && !jsonObj.get("ethnicityAlt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicityAlt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethnicityAlt").toString()));
      }
      if ((jsonObj.get("ethnicity") != null && !jsonObj.get("ethnicity").isJsonNull()) && !jsonObj.get("ethnicity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethnicity").toString()));
      }
      if ((jsonObj.get("countryIso2") != null && !jsonObj.get("countryIso2").isJsonNull()) && !jsonObj.get("countryIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryIso2").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ethnicitiesTop") != null && !jsonObj.get("ethnicitiesTop").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicitiesTop` to be an array in the JSON string but got `%s`", jsonObj.get("ethnicitiesTop").toString()));
      }
      if (jsonObj.get("religionStats") != null && !jsonObj.get("religionStats").isJsonNull()) {
        JsonArray jsonArrayreligionStats = jsonObj.getAsJsonArray("religionStats");
        if (jsonArrayreligionStats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("religionStats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `religionStats` to be an array in the JSON string but got `%s`", jsonObj.get("religionStats").toString()));
          }

          // validate the optional field `religionStats` (array)
          for (int i = 0; i < jsonArrayreligionStats.size(); i++) {
            ReligionStatOut.validateJsonObject(jsonArrayreligionStats.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("religionStatsAlt") != null && !jsonObj.get("religionStatsAlt").isJsonNull()) {
        JsonArray jsonArrayreligionStatsAlt = jsonObj.getAsJsonArray("religionStatsAlt");
        if (jsonArrayreligionStatsAlt != null) {
          // ensure the json data is an array
          if (!jsonObj.get("religionStatsAlt").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `religionStatsAlt` to be an array in the JSON string but got `%s`", jsonObj.get("religionStatsAlt").toString()));
          }

          // validate the optional field `religionStatsAlt` (array)
          for (int i = 0; i < jsonArrayreligionStatsAlt.size(); i++) {
            ReligionStatOut.validateJsonObject(jsonArrayreligionStatsAlt.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalNameDiasporaedOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalNameDiasporaedOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalNameDiasporaedOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalNameDiasporaedOut.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalNameDiasporaedOut>() {
           @Override
           public void write(JsonWriter out, PersonalNameDiasporaedOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalNameDiasporaedOut read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonalNameDiasporaedOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonalNameDiasporaedOut
  * @throws IOException if the JSON string is invalid with respect to PersonalNameDiasporaedOut
  */
  public static PersonalNameDiasporaedOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalNameDiasporaedOut.class);
  }

 /**
  * Convert an instance of PersonalNameDiasporaedOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

