/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.namsor.sdk2.invoke.JSON;

/**
 * List of API Services
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-16T08:45:49.006+02:00[Europe/Berlin]")
public class APIServiceOut {
  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_GROUP = "serviceGroup";
  @SerializedName(SERIALIZED_NAME_SERVICE_GROUP)
  private String serviceGroup;

  public static final String SERIALIZED_NAME_COST_IN_UNITS = "costInUnits";
  @SerializedName(SERIALIZED_NAME_COST_IN_UNITS)
  private Integer costInUnits;

  public APIServiceOut() {
  }

  public APIServiceOut serviceName(String serviceName) {
    
    this.serviceName = serviceName;
    return this;
  }

   /**
   * A service name corresponds to classifier name in apiStatus (ex. personalname_gender or personalfullname_gender)
   * @return serviceName
  **/
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }


  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public APIServiceOut serviceGroup(String serviceGroup) {
    
    this.serviceGroup = serviceGroup;
    return this;
  }

   /**
   * Groups together classifiers providing a similar service (ex. gender groups personalname_gender and personalfullname_gender)
   * @return serviceGroup
  **/
  @javax.annotation.Nullable
  public String getServiceGroup() {
    return serviceGroup;
  }


  public void setServiceGroup(String serviceGroup) {
    this.serviceGroup = serviceGroup;
  }


  public APIServiceOut costInUnits(Integer costInUnits) {
    
    this.costInUnits = costInUnits;
    return this;
  }

   /**
   * Indicates how many units per call this service costs (ex. the number of units per name)
   * @return costInUnits
  **/
  @javax.annotation.Nullable
  public Integer getCostInUnits() {
    return costInUnits;
  }


  public void setCostInUnits(Integer costInUnits) {
    this.costInUnits = costInUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIServiceOut apIServiceOut = (APIServiceOut) o;
    return Objects.equals(this.serviceName, apIServiceOut.serviceName) &&
        Objects.equals(this.serviceGroup, apIServiceOut.serviceGroup) &&
        Objects.equals(this.costInUnits, apIServiceOut.costInUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceName, serviceGroup, costInUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIServiceOut {\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    serviceGroup: ").append(toIndentedString(serviceGroup)).append("\n");
    sb.append("    costInUnits: ").append(toIndentedString(costInUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serviceName");
    openapiFields.add("serviceGroup");
    openapiFields.add("costInUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIServiceOut
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIServiceOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIServiceOut is not found in the empty JSON string", APIServiceOut.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIServiceOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIServiceOut` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if ((jsonObj.get("serviceGroup") != null && !jsonObj.get("serviceGroup").isJsonNull()) && !jsonObj.get("serviceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceGroup").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIServiceOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIServiceOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIServiceOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIServiceOut.class));

       return (TypeAdapter<T>) new TypeAdapter<APIServiceOut>() {
           @Override
           public void write(JsonWriter out, APIServiceOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIServiceOut read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIServiceOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIServiceOut
  * @throws IOException if the JSON string is invalid with respect to APIServiceOut
  */
  public static APIServiceOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIServiceOut.class);
  }

 /**
  * Convert an instance of APIServiceOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

