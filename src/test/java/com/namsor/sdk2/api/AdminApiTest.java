/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 1000 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.2-beta
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.api;

import com.namsor.sdk2.invoke.ApiException;
import com.namsor.sdk2.model.APIKeyOut;
import com.namsor.sdk2.model.APIPeriodUsageOut;
import com.namsor.sdk2.model.APIPlanSubscriptionOut;
import com.namsor.sdk2.model.APIPlansOut;
import com.namsor.sdk2.model.BillingHistoryOut;
import com.namsor.sdk2.model.BillingInfoInOut;
import com.namsor.sdk2.model.CurrenciesOut;
import com.namsor.sdk2.model.InlineObject;
import com.namsor.sdk2.model.SoftwareVersionOut;
import com.namsor.sdk2.model.SystemMetricsOut;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Ignore
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    
    /**
     * Print current API usage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsageTest() throws ApiException {
        APIPeriodUsageOut response = api.apiUsage();

        // TODO: test validations
    }
    
    /**
     * Print historical API usage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsageHistoryTest() throws ApiException {
        APIPeriodUsageOut response = api.apiUsageHistory();

        // TODO: test validations
    }
    
    /**
     * Print historical API usage (in an aggregated view, by service, by day/hour/min).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsageHistoryAggregateTest() throws ApiException {
        APIPeriodUsageOut response = api.apiUsageHistoryAggregate();

        // TODO: test validations
    }
    
    /**
     * List all available plans in the default currency (usd).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availablePlansTest() throws ApiException {
        APIPlansOut response = api.availablePlans();

        // TODO: test validations
    }
    
    /**
     * List all available plans in the user&#39;s preferred currency.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availablePlans1Test() throws ApiException {
        String token = null;
        APIPlansOut response = api.availablePlans1(token);

        // TODO: test validations
    }
    
    /**
     * List of API services and usage cost in Units (default is 1&#x3D;ONE Unit).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void availableServicesTest() throws ApiException {
        APIPlansOut response = api.availableServices();

        // TODO: test validations
    }
    
    /**
     * List possible currency options for billing (USD, EUR, GBP, ...)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void billingCurrenciesTest() throws ApiException {
        CurrenciesOut response = api.billingCurrencies();

        // TODO: test validations
    }
    
    /**
     * Read the history billing information (invoices paid via Stripe or manually).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void billingHistoryTest() throws ApiException {
        String token = null;
        BillingHistoryOut response = api.billingHistory(token);

        // TODO: test validations
    }
    
    /**
     * Read the billing information (company name, address, phone, vat ID)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void billingInfoTest() throws ApiException {
        String token = null;
        BillingInfoInOut response = api.billingInfo(token);

        // TODO: test validations
    }
    
    /**
     * Create a Stripe Customer, based on a payment card token (from secure StripeJS) and email.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chargeTest() throws ApiException {
        InlineObject inlineObject = null;
        APIKeyOut response = api.charge(inlineObject);

        // TODO: test validations
    }
    
    /**
     * Setting an API Key to a corporate status.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corporateKeyTest() throws ApiException {
        String apiKey = null;
        Boolean corporate = null;
        api.corporateKey(apiKey, corporate);

        // TODO: test validations
    }
    
    /**
     * Update debug level for a classifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void debugLevelTest() throws ApiException {
        String logger = null;
        String level = null;
        api.debugLevel(logger, level);

        // TODO: test validations
    }
    
    /**
     * Invalidate system caches.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invalidateCacheTest() throws ApiException {
        api.invalidateCache();

        // TODO: test validations
    }
    
    /**
     * Activate/deactivate learning from a source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void learnableTest() throws ApiException {
        String source = null;
        Boolean learnable = null;
        api.learnable(source, learnable);

        // TODO: test validations
    }
    
    /**
     * Get the overall API counter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void namsorCounterTest() throws ApiException {
        SoftwareVersionOut response = api.namsorCounter();

        // TODO: test validations
    }
    
    /**
     * Get the Stripe payment information associated with the current google auth session token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentInfoTest() throws ApiException {
        String token = null;
        APIKeyOut response = api.paymentInfo(token);

        // TODO: test validations
    }
    
    /**
     * Procure an API Key (sent via Email), based on an auth token. Keep your API Key secret.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void procureKeyTest() throws ApiException {
        String token = null;
        APIKeyOut response = api.procureKey(token);

        // TODO: test validations
    }
    
    /**
     * Redeploy UI from current dev branch.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redeployUITest() throws ApiException {
        api.redeployUI();

        // TODO: test validations
    }
    
    /**
     * Redeploy UI from current dev branch.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void redeployUI1Test() throws ApiException {
        Boolean live = null;
        api.redeployUI1(live);

        // TODO: test validations
    }
    
    /**
     * Subscribe to a give API plan, using the user&#39;s preferred or default currency.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserAccountTest() throws ApiException {
        String token = null;
        APIPlanSubscriptionOut response = api.removeUserAccount(token);

        // TODO: test validations
    }
    
    /**
     * Stop learning and shutdown system.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownTest() throws ApiException {
        api.shutdown();

        // TODO: test validations
    }
    
    /**
     * Get the current software version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void softwareVersionTest() throws ApiException {
        SoftwareVersionOut response = api.softwareVersion();

        // TODO: test validations
    }
    
    /**
     * Print basic source statistics.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sourceStatsTest() throws ApiException {
        String source = null;
        SystemMetricsOut response = api.sourceStats(source);

        // TODO: test validations
    }
    
    /**
     * Print basic system statistics.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statsTest() throws ApiException {
        SystemMetricsOut response = api.stats();

        // TODO: test validations
    }
    
    /**
     * Connects a Stripe Account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stripeConnectTest() throws ApiException {
        String scope = null;
        String code = null;
        String error = null;
        String errorDescription = null;
        api.stripeConnect(scope, code, error, errorDescription);

        // TODO: test validations
    }
    
    /**
     * Subscribe to a give API plan, using the user&#39;s preferred or default currency.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribePlanTest() throws ApiException {
        String planName = null;
        String token = null;
        APIPlanSubscriptionOut response = api.subscribePlan(planName, token);

        // TODO: test validations
    }
    
    /**
     * Sets or update the billing information (company name, address, phone, vat ID)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBillingInfoTest() throws ApiException {
        String token = null;
        BillingInfoInOut billingInfoInOut = null;
        BillingInfoInOut response = api.updateBillingInfo(token, billingInfoInOut);

        // TODO: test validations
    }
    
    /**
     * Modifies the hard/soft limit on the API plan&#39;s overages (default is 0$ soft limit).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLimitTest() throws ApiException {
        Integer usageLimit = null;
        Boolean hardOrSoft = null;
        String token = null;
        APIPeriodUsageOut response = api.updateLimit(usageLimit, hardOrSoft, token);

        // TODO: test validations
    }
    
    /**
     * Update the default Stripe card associated with the current google auth session token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePaymentDefaultTest() throws ApiException {
        String defautSourceId = null;
        String token = null;
        APIKeyOut response = api.updatePaymentDefault(defautSourceId, token);

        // TODO: test validations
    }
    
    /**
     * Get the user profile associated with the current google auth session token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userInfoTest() throws ApiException {
        String token = null;
        APIKeyOut response = api.userInfo(token);

        // TODO: test validations
    }
    
    /**
     * Verifies an email, based on token sent to that email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyEmailTest() throws ApiException {
        String emailToken = null;
        APIKeyOut response = api.verifyEmail(emailToken);

        // TODO: test validations
    }
    
    /**
     * Verifies an email, based on token sent to that email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyRemoveEmailTest() throws ApiException {
        String emailToken = null;
        APIKeyOut response = api.verifyRemoveEmail(emailToken);

        // TODO: test validations
    }
    
    /**
     * Vetting of a source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vetTest() throws ApiException {
        String source = null;
        Boolean vetted = null;
        api.vet(source, vetted);

        // TODO: test validations
    }
    
}
