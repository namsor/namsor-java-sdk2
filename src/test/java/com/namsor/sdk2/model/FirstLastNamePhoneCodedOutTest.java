/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.13
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for FirstLastNamePhoneCodedOut
 */
public class FirstLastNamePhoneCodedOutTest {
    private final FirstLastNamePhoneCodedOut model = new FirstLastNamePhoneCodedOut();

    /**
     * Model tests for FirstLastNamePhoneCodedOut
     */
    @Test
    public void testFirstLastNamePhoneCodedOut() {
        // TODO: test FirstLastNamePhoneCodedOut
    }

    /**
     * Test the property 'script'
     */
    @Test
    public void scriptTest() {
        // TODO: test script
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'firstName'
     */
    @Test
    public void firstNameTest() {
        // TODO: test firstName
    }

    /**
     * Test the property 'lastName'
     */
    @Test
    public void lastNameTest() {
        // TODO: test lastName
    }

    /**
     * Test the property 'internationalPhoneNumberVerified'
     */
    @Test
    public void internationalPhoneNumberVerifiedTest() {
        // TODO: test internationalPhoneNumberVerified
    }

    /**
     * Test the property 'phoneCountryIso2Verified'
     */
    @Test
    public void phoneCountryIso2VerifiedTest() {
        // TODO: test phoneCountryIso2Verified
    }

    /**
     * Test the property 'phoneCountryCode'
     */
    @Test
    public void phoneCountryCodeTest() {
        // TODO: test phoneCountryCode
    }

    /**
     * Test the property 'phoneCountryCodeAlt'
     */
    @Test
    public void phoneCountryCodeAltTest() {
        // TODO: test phoneCountryCodeAlt
    }

    /**
     * Test the property 'phoneCountryIso2'
     */
    @Test
    public void phoneCountryIso2Test() {
        // TODO: test phoneCountryIso2
    }

    /**
     * Test the property 'phoneCountryIso2Alt'
     */
    @Test
    public void phoneCountryIso2AltTest() {
        // TODO: test phoneCountryIso2Alt
    }

    /**
     * Test the property 'originCountryIso2'
     */
    @Test
    public void originCountryIso2Test() {
        // TODO: test originCountryIso2
    }

    /**
     * Test the property 'originCountryIso2Alt'
     */
    @Test
    public void originCountryIso2AltTest() {
        // TODO: test originCountryIso2Alt
    }

    /**
     * Test the property 'phoneNumber'
     */
    @Test
    public void phoneNumberTest() {
        // TODO: test phoneNumber
    }

    /**
     * Test the property 'verified'
     */
    @Test
    public void verifiedTest() {
        // TODO: test verified
    }

    /**
     * Test the property 'score'
     */
    @Test
    public void scoreTest() {
        // TODO: test score
    }

    /**
     * Test the property 'countryIso2'
     */
    @Test
    public void countryIso2Test() {
        // TODO: test countryIso2
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

}
