/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * OpenAPI spec version: 2.0.30
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.namsor.sdk2.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.namsor.sdk2.model.PersonalNameDiasporaedOut;
import com.namsor.sdk2.model.PersonalNameGenderedOut;
import com.namsor.sdk2.model.PersonalNameGeoOut;
import com.namsor.sdk2.model.PersonalNameOriginedOut;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for CorridorFullOut
 */
public class CorridorFullOutTest {
    private final CorridorFullOut model = new CorridorFullOut();

    /**
     * Model tests for CorridorFullOut
     */
    @Test
    public void testCorridorFullOut() {
        // TODO: test CorridorFullOut
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'personalNameGeoFromGender'
     */
    @Test
    public void personalNameGeoFromGenderTest() {
        // TODO: test personalNameGeoFromGender
    }

    /**
     * Test the property 'personalNameGeoToGender'
     */
    @Test
    public void personalNameGeoToGenderTest() {
        // TODO: test personalNameGeoToGender
    }

    /**
     * Test the property 'personalNameOriginedOut'
     */
    @Test
    public void personalNameOriginedOutTest() {
        // TODO: test personalNameOriginedOut
    }

    /**
     * Test the property 'personalNameGeoFromCountry'
     */
    @Test
    public void personalNameGeoFromCountryTest() {
        // TODO: test personalNameGeoFromCountry
    }

    /**
     * Test the property 'personalNameGeoToCountry'
     */
    @Test
    public void personalNameGeoToCountryTest() {
        // TODO: test personalNameGeoToCountry
    }

    /**
     * Test the property 'personalNameDiasporaedOut'
     */
    @Test
    public void personalNameDiasporaedOutTest() {
        // TODO: test personalNameDiasporaedOut
    }

    /**
     * Test the property 'firstLastNameGeoToCountry'
     */
    @Test
    public void firstLastNameGeoToCountryTest() {
        // TODO: test firstLastNameGeoToCountry
    }

    /**
     * Test the property 'firstLastNameGeoFromCountry'
     */
    @Test
    public void firstLastNameGeoFromCountryTest() {
        // TODO: test firstLastNameGeoFromCountry
    }

    /**
     * Test the property 'firstLastNameGeoFromGender'
     */
    @Test
    public void firstLastNameGeoFromGenderTest() {
        // TODO: test firstLastNameGeoFromGender
    }

    /**
     * Test the property 'firstLastNameGeoToGender'
     */
    @Test
    public void firstLastNameGeoToGenderTest() {
        // TODO: test firstLastNameGeoToGender
    }

    /**
     * Test the property 'script'
     */
    @Test
    public void scriptTest() {
        // TODO: test script
    }

}
